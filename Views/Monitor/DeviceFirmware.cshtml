@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@using System.Globalization;
@model SLA_Management.Models.Monitor.DeviceFirmwareViewModel
@{
    ViewData["Title"] = "Device Firmware Monitor";
    string[] tableHeaders = new string[]
     {
        "No.",
        "Serial No.",
        "Terminal ID",
        "Terminal Name",
        "PIN Version",
        "IDC Version",
        "PTR Version",
        "BCR Version",
        "SIU Version",
        "Update Date"
    };
}
<style>
    .pagination li a.active {
        background-color: #ffc107;
        font-weight: bold;
        border-color: #ffc107;
    }


    option:hover {
        box-shadow: 0 0 10px 100px #ffc107 inset;
        transition: all .2s ease-in-out;
    }

    option:checked {
        box-shadow: 0 0 10px 100px #ffc107 inset !important;
    }
    .dropdown-toggle {
        border-radius: 10px;
    }
    .bootstrap-select:not([class*="col-"]):not([class*="form-control"]):not(.input-group-btn) {
        width: 526px;
        margin-left: -2px;
    }

    .bootstrap-select > .dropdown-toggle {
        border-color: #ced4da;
        background-color: transparent;
        position: relative;
        width: 100%;
        text-align: right;
        white-space: nowrap;
        display: -webkit-inline-box;
        display: -webkit-inline-flex;
        display: -ms-inline-flexbox;
        display: inline-flex;
        -webkit-box-align: center;
        -webkit-align-items: center;
        -ms-flex-align: center;
        align-items: center;
        -webkit-box-pack: justify;
        -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
        justify-content: space-between;
    }

    select.form-control {
        -webkit-appearance: button;
    }
    #header_search {
        top: 20px;
        position: relative;
        background-color: orange;
        border: solid;
        padding: 8px 40px 8px 40px;
        border-radius: 12px;
        font-weight: 700;
    }

    #main_search {
        margin-bottom: 50px;
        padding: 30px 3vw 30px 3vw;
        margin-left: 50px;
        margin-right: 50px;
        border: 3px solid #888888;
        background-color: white;
        border-radius: 50px;
    }

    #submit {
        position: relative;
        top: 50px;
        background: lightgray;
        border: 10px double white;
        border-radius: 20px;
        padding: 0px 10px 0px 10px;
    }

    #before-submit {
        display: flex;
        justify-content: center;
    }

    th {
        white-space: nowrap;
    }

    .disabled {
        color: gray !important;
        cursor: not-allowed;
        pointer-events: none;
        text-decoration: none;
        opacity: 0.6;
    }
</style>
<div class="content contentHeader">
    <div class="container w-auto containerHeader" style="padding-bottom: 0px;">
        <div class="row">
            <div class="col col-md-1">
            </div>
            <div class="col col-md-4">
                <a class="text-white fs-4" id="header_search">Device Firmware Monitor</a>
            </div>
        </div>
        <div id="main_search">
            @using (Html.BeginForm("DeviceFirmware", "Monitor", FormMethod.Get, new { id = "DeviceFirmware" }))
            {
                <input type="hidden" id="page" name="page" value="@Model.CurrentPage" />
                <input type="hidden" id="totalPage" name="totalPage" value="@Model.TotalPages" />
                <div class="row" style="margin-top: 45px;align-items:center;    display: flex;justify-content: space-around;padding:0vw 3vw 0vw 3vw;white-space:nowrap;">

                    <div class="col-md-1" style="">
                        <h>Terminal : </h>
                    </div>

                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        <div class="form-group">
                            <select class="selectpicker form-control subsearch" id="termID" name="termID" data-live-search="true">

                                <option data-tokens="" value="">--</option>
                                @foreach (var item in Model.Device_Info_Records)
                                {
                                    if (item.TERM_ID == Model.selectedTerminal)
                                    {
                                        <option value=@item.TERM_ID data-tokens=@item.TERM_ID selected>@item.TERM_SEQ : @item.TERM_ID : @item.TERM_NAME</option>
                                    }
                                    else
                                    {
                                        <option value=@item.TERM_ID data-tokens=@item.TERM_ID>@item.TERM_SEQ : @item.TERM_ID : @item.TERM_NAME</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col col-md-1" style="">
                        <h style="display:flex;justify-content:center;">Terminal Type : </h>
                    </div>

                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        <select class="selectpicker form-control subsearch" id="terminalType" name="terminalType" data-live-search="true">
                            <option data-tokens="" value="">--</option>
                            @if (Model.selectedTerminalType == "ALL")
                            {
                                <option data-tokens="ALL" value="ALL" selected>ALL</option>
                            }
                            else
                            {
                                <option data-tokens="ALL" value="ALL">ALL</option>
                            }
                            @foreach (var item in Model.TerminalTypes)
                            {
                                if (item.Terminal_Type == Model.selectedTerminalType)
                                {
                                    <option value="@item.Terminal_Type" data-tokens="@item.Terminal_Type" selected>@item.Terminal_Type</option>
                                }
                                else
                                {
                                    <option value="@item.Terminal_Type" data-tokens="@item.Terminal_Type">@item.Terminal_Type</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col col-md-1" style="">
                        <h>Sort : </h>
                    </div>

                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        <div class="form-group">
                            <!--		Show Numbers Of Rows 		-->
                            @Html.DropDownList("sort", new SelectListItem[] {
                        new SelectListItem(){ Text="Terminal No", Value = "term_id" },
                        new SelectListItem(){ Text="Branch No", Value = "branch_id" },
                        new SelectListItem(){ Text="Serial No", Value = "term_seq" },
                                        }, new
                                        {
                                            @class = "form-control selectpicker subsearch"
                                     ,
                                            @name = "state"

                                        })

                        </div>
                    </div>

                </div>
                <div class="row" style="margin-top: 45px;align-items:center;    display: flex;justify-content: space-around;padding:0vw 3vw 0vw 3vw;white-space:nowrap;">

                    <div class="col col-md-1" style="">
                        <h>Rows : </h>
                    </div>

                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        <div class="form-group">
                            <!--		Show Numbers Of Rows 		-->
                            @Html.DropDownList("maxRows", new SelectListItem[] {
                        new SelectListItem(){ Text="50", Value = "50", Selected = true },
                        new SelectListItem(){ Text="100", Value = "100"  },
                                        }, new
                                        {
                                            @class = "form-control selectpicker subsearch"
                                     ,
                                            @name = "state"

                                        })

                        </div>
                    </div>
                    <div class="col col-md-1" style="">
                    </div>

                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                    </div>
                    <div class="col col-md-1" style="">
                    </div>

                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                    </div>

                </div>
                <div class="row" style="margin-top: 15px;align-items:center;">
                    <div class="col col-lg-1">
                    </div>

                </div>

                <div class="row justify-content-md-center" style="">


                    <div class="col" id="before-submit">
                        <div id="submit">
                            <button type="submit" data-toggle="modal" data-target="#WaitingModal" id="btnsearch" class="btn" style="padding:0px;" onclick="updateTable('search')">
                                <img src="~/images/icon_search.png" style="width: 50px; height: 50px" class="rounded-lg  p-0" alt="Search" />
                            </button>

                            <button type="submit" id="btnclear" class="btn" data-toggle="tooltip" name="cmdButton" title="ล้างข้อมูล" value="Clear" style="padding:0px;border: 0px; background-color: transparent;" onclick="clearData()">
                                <img src="~/images/icon_refresh.png" style="width: 40px; height: 38px" class="rounded-lg p-0" alt="Clear Data" />
                            </button>


                            <a id="btnSEExp" data-toggle="tooltip" title="Excel Export Report" style="cursor: pointer; padding:0px;">
                                <img src="~/images/icon_excel.png" style="width: 50px; height: 50px" class="rounded-lg  p-0" alt="Excel Export Report" />
                            </a>
                        </div>
                    </div>

                </div>
            }
        </div>
    </div>
    <div class="container-fluid">
        <div class="row" style="background-color: #f8d5ad;width: fit-content;padding: 8px;margin-left: 3px;border-radius: 15px;font-size: 22px;font-weight: bold;margin-bottom: 15px; border:1px solid lightgrey;">

            <div class="col" style="display: flex;justify-content: center;">
                <a style="white-space:nowrap;align-items: center;display: flex;">Total Record:</a>
            </div>
            <div class="col" style="display: flex;justify-content: center;">
                <a id="totalRecords" style="white-space:nowrap;display: flex;align-items: center;background-color: rgba(255,255,255,1);padding: 10px 35px 10px 35px;border-radius: 10px;" ;="">@Model.TotalRecords</a>
            </div>
        </div>
        <div class="table-responsive" style="overflow-x: hidden;">
            <table id="table-recurringCase" class="table table-striped custom-table">
                <thead>
                    <tr>
                        @{
                            foreach (var head in tableHeaders)
                            {
                                <th scope="col" style="text-align:center"> @head </th>
                            }
                        }

                    </tr>
                </thead>
                <tbody>
                    @{
                        if(Model.DeviceFirmwareList != null)
                        {
                            foreach(var data in Model.DeviceFirmwareList)
                            {
                                <tr>
                                    <td style="text-align:left">@data.No</td>
                                    <td style="text-align:left">@data.Term_SEQ</td>
                                    <td style="text-align:left">@data.Term_ID</td>
                                    <td style="text-align:left">@data.Term_Name</td>
                                    <td style="text-align:left">@data.PIN_Ver</td>
                                    <td style="text-align:left">@data.IDC_Ver</td>
                                    <td style="text-align:left">@data.PTR_Ver</td>
                                    <td style="text-align:left">@data.BCR_Ver</td>
                                    <td style="text-align:left">@data.SIU_Ver</td>
                                    <td style="text-align:left">@Convert.ToDateTime(data.Update_Date).ToString("yyyy-MM-dd")</td>
                                </tr>
                            }
                        }
                        if (Model.DeviceFirmwareList.Count == 0)
                        {
                            <tr>
                                <td colspan="10" style="text-align: center;"> NO DATA </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <div class="row">
                <div class="col-md-2" style="z-index:2;">
                    <p style="font-size:16px;font-weight:bolder;">
                        Select page :
                        @Html.DropDownList("seletePageNow", new SelectList(Enumerable.Range(1, Model.TotalPages), Model.CurrentPage), new
                            {
                                @class = "form-control DropDown",
                                @onchange = "fetchData(this);",
                            })
                    </p>
                </div>
                @* handle page size one time *@
                @{
                    int maxPageShow = 5;
                    int currentPage = Model.CurrentPage;

                    int startPage = ((currentPage - 1) / maxPageShow) * maxPageShow + 1;
                    int endPage = Math.Min(startPage + maxPageShow - 1, Model.TotalPages);
                }
                <div class="col colPagination" style="padding-top:10px;z-index:1;">

                    <nav>
                        <div class="pagination" id="pagination">
                            <li data-page="prev" id="prev">
                                <a style="color: #7a7a7a;"> < </a>
                            </li>
                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li data-page="@i" id="page-link">
                                    <a style="color: #7a7a7a;" class="@(i == Model.CurrentPage ? "active" : "")">@i</a>
                                </li>
                            }
                            <li data-page="next" id="next">
                                <a style="color: #7a7a7a;"> > </a>
                            </li>

                        </div>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    $("#btnSEExp").click(function (e) {
        e.preventDefault();
        var termId = $('#termID').val();
        var terminalType = $('#terminalType').val();
        var sort = $('#sort').val();
        var page = $('#page').val();
        var maxRow = $('#maxRows').val();
        var rptType = "xlsx";
        $.ajax({
            type: "POST",
            dataType: "json",
            data: JSON.stringify({
                termID: termId,
                terminalType: terminalType,
                sort: sort             
            }),
            contentType: 'application/json; charset=utf-8',
            url: '@Url.Action("DeviceFirmware_ExportXlsx", "Monitor")',
            success: function (result) {
                if (result.success == 'S') {
                    var url = '@Url.Action("DeviceFirmware_DownloadExportFile", "Monitor")'
                    window.location = '@Url.Action("DeviceFirmware_DownloadExportFile", "Monitor")/?rpttype=' + rptType;
                }
                else { alert(result.errstr); }
            },
            error: function (err) {
                alert('@ViewBag.ErrorMsg');
            }
        });
    });
    function clearData() {
        // Clear the value of the Fields
        document.querySelector('[name="termID"]').value = "";
        document.querySelector('[name="terminalType"]').value = "";

        document.getElementById('DeviceFirmware').submit();
    }
    document.addEventListener('DOMContentLoaded', function () {
        let currentPage = parseInt(document.getElementById('page').value);
        let totalPages = parseInt(document.getElementById('totalPage').value);


        //handle page click
        const page_click = document.querySelectorAll('#page-link');
        page_click.forEach(x => {
            x.addEventListener('click', function (e) {
                e.preventDefault();
                const page = parseInt(this.getAttribute('data-page'));
                resubmitPage(page);
            });
        });

        const next = document.getElementById('next');
        const prev = document.getElementById('prev');


        next.replaceWith(next.cloneNode(true));
        prev.replaceWith(prev.cloneNode(true));


        const newNext = document.getElementById('next');
        const newPrev = document.getElementById('prev');

        newPrev.addEventListener('click', function (e) {
            e.preventDefault();
            if (currentPage > 1) {
                currentPage--;
                resubmitPage(currentPage);
            }
        });


        newNext.addEventListener('click', function (e) {
            e.preventDefault();
            currentPage++;
            resubmitPage(currentPage);
        });


        if (currentPage >= totalPages) {
            newNext.classList.add('disabled');
            newNext.style.pointerEvents = 'none';
        } else {
            newNext.classList.remove('disabled');
            newNext.style.pointerEvents = 'auto';
        }


        if (currentPage <= 1) {
            newPrev.classList.add('disabled');
            newPrev.style.pointerEvents = 'none';
        } else {
            newPrev.classList.remove('disabled');
            newPrev.style.pointerEvents = 'auto';
        }
        newNext.classList.toggle('disabled', currentPage >= totalPages);
        newNext.disabled = currentPage >= totalPages;
        newPrev.classList.toggle('disabled', currentPage === 1);
    });
    function resubmitPage(page) {
        const pageInput = document.getElementById('page');
        pageInput.value = page;
        document.getElementById('DeviceFirmware').submit();
    }
    function fetchData(dropdown) {
        var selectPage = parseInt(dropdown.value);
        resubmitPage(selectPage);
    }
</script>