﻿@{

}

@{
    ViewData["Title"] = "Transaction Monitor ";
    string[] tableHeaders = new string[]
    {
    "No",
    "Action",
    "Seq ",
    "Date Time",
    "Txn. Type",
    "From Bank",
    "To Bank",
    "Card No ",
    "From Account",
    "To Account",
    "Status",
    "Amount",
    "Bill Counter",
    "RC",
    };

    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Table #6</title>
</head>

<style>
    .bootstrap-select > .dropdown-toggle {
        border-color: #ced4da;
        background-color: transparent;
        position: relative;
        width: 100%;
        text-align: right;
        white-space: nowrap;
        display: -webkit-inline-box;
        display: -webkit-inline-flex;
        display: -ms-inline-flexbox;
        display: inline-flex;
        -webkit-box-align: center;
        -webkit-align-items: center;
        -ms-flex-align: center;
        align-items: center;
        -webkit-box-pack: justify;
        -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
        justify-content: space-between;
    }

    .form-control {
        border-radius: 10px;
    }
</style>

<style>
    .chkbox {
        text-align: left;
    }

    .my-dropdown {
        width: 100%;
        height: 38px;
    }

    input:disabled {
        background-color: #f2f2f2;
    }

    .btnsearch {
        font-size: 18px;
    }

    select.form-control {
        -webkit-appearance: button;
    }

    input.form-control {
        -webkit-appearance: button;
        border-radius: 10px;
    }


    #header_search {
        top: 20px;
        position: relative;
        background-color: orange;
        border: solid;
        padding: 8px 40px 8px 40px;
        border-radius: 12px;
        font-weight: 700;
    }

    .item {
        padding: 0px;
    }

    #submit {
        position: relative;
        top: 50px;
        background: lightgray;
        border: 10px double white;
        border-radius: 20px;
        padding: 0px 10px 0px 10px;
    }

    #before-submit {
        display: flex;
        justify-content: center;
    }

    #main_search {
        margin-bottom: 50px;
        padding: 30px 0;
        margin-left: 50px;
        margin-right: 50px;
        border: 3px solid #888888;
        background-color: white;
        border-radius: 50px;
    }

    .dropdown-toggle {
        border-radius: 10px;
    }

    th {
        text-align: center;
    }

    .form-group {
        margin-bottom: 1em;
    }

    h {
        white-space: nowrap;
    }

    label {
        white-space: nowrap;
    }
</style>


<div class="container w-auto containerHeader">

    <div class="row">
        <div class="col col-md-1">
        </div>
        <div class="col col-md-4">
            <a class="text-white fs-4" id="header_search">Transaction Monitor</a>
        </div>
    </div>

    <div id="main_search">

        @using (Html.BeginForm("Transactions", "Operation", FormMethod.Get, new { id = "", style = "padding: 0 4vw;" }))
        {
            <div class="row" style="margin-top: 35px;display: flex;align-items: baseline;justify-content: space-evenly;">

                <div class="col-md-1" style="width: 112px;">
                    <h>Terminal ID : </h>
                </div>
                <div class="col-md-2 " style="">
                    <div class="">
                        <select class="selectpicker form-control subsearch " id="terminalno" name="TermID" data-live-search="true">

                            <option data-tokens="" value="">--</option>
                            @foreach (var item in ViewBag.CurrentTID)
                            {
                                if (@item.TERM_ID != @ViewBag.TermID)
                                {
                                    <option value=@item.TERM_ID data-tokens=@item.TERM_ID>@item.TERM_SEQ : @item.TERM_ID : @item.TERM_NAME</option>
                                }
                                else
                                {
                                    <option value=@item.TERM_ID data-tokens=@item.TERM_ID selected>@item.TERM_SEQ : @item.TERM_ID : @item.TERM_NAME</option>

                                }
                            }

                        </select>
                    </div>
                </div>

                <div class="col-md-1" style="width: 112px;">
                    <h>From Date : </h>
                </div>
                <div class="col-md-2 " style="">
                    <div class="">
                        <span class=""><i class="glyphicon glyphicon-calendar"></i></span>
                        @Html.TextBox("fromdate", ViewBag.CurrentFr as string, new { @class = "form-control subsearch", @placeholder = "dd/mm/yyyy", @type = "date", @min = "1997-01-01", @max = "2030-12-31" ,@onfocus="(this.type='date')"})
                    </div>
                </div>
                <div class="col-md-1" style="width: 112px;">
                    <h>To Date : </h>
                </div>
                <div class="col-md-2" style="">
                    <div class="">
                        <span class=""><i class="glyphicon glyphicon-calendar"></i></span>
                        @Html.TextBox("todate", ViewBag.CurrentTo as string, new { @class = "form-control subsearch", @placeholder = "dd/mm/yyyy", @type = "date", @min = "01-01-1997", @max = "31-12-2030" ,@pattern="dd/mm/yyyy" })
                    </div>
                </div>
            </div>
            <div class="row" style="margin-top: 27px;display: flex;align-items: baseline;justify-content: space-evenly;">


                <div class="col-md-1" style="width: 112px;">
                    <h>Transaction Type : </h>
                </div>
                <div class="col-md-2" style="">
                    <div class="form-group">
                        <select class="selectpicker form-control subsearch " id="trxtype" name="TermID" data-live-search="true">

                            <option data-tokens="" value="">All</option>
                            @foreach (var item in ViewBag.trxTypeData)
                            {
                                if (@item.Sdatavalue != @ViewBag.Sdatavalue)
                                {
                                    <option value=@item.Sdatavalue data-tokens=@item.Sdatavalue>@item.Sdatavalue</option>
                                }
                                else
                                {
                                    <option value=@item.Sdatavalue data-tokens=@item.Sdatavalue selected>@item.Sdatavalue</option>

                                }
                            }
                        </select>
                    </div>

                </div>

                <div class="col-md-1" style="width: 112px;">
                    <h>Status : </h>
                </div>
                <div class="col-md-2" style="">
                    <div class="form-group">
                        @Html.DropDownList("status", new SelectListItem[] {
                    new SelectListItem(){ Text="ALL", Value = ""  },
                    new SelectListItem(){ Text="OK", Value = "OK"  },
                    new SelectListItem(){ Text="FAIL", Value = "FAIL"  }
                    }, new
                    {
                    @class = "form-control dropdown "
                    ,
                    @name = "state"
                    })
                    </div>
                </div>
                <div class="col-md-1" style="width: 112px;">
                    <h>Response Code : </h>
                </div>
                <div class="col-md-2" style="">

                    <div class="form-group">
                        <select class="selectpicker form-control subsearch " id="rc" name="TermID" data-live-search="true">

                            <option data-tokens="" value="">All</option>
                            @foreach (var item in ViewBag.RCData)
                            {
                                if (@item.Sdatavalue != @ViewBag.Sdatavalue)
                                {
                                    <option value=@item.Sdatavalue data-tokens=@item.Sdatavalue>@item.Sdatavalue</option>
                                }
                                else
                                {
                                    <option value=@item.Sdatavalue data-tokens=@item.Sdatavalue selected>@item.Sdatavalue</option>

                                }
                            }
                        </select>
                    </div>
                </div>
            </div>

            <div class="row " style="margin-top: 15px;display: flex;align-items: baseline;justify-content: space-evenly;">
                <div style="width: 112px;" class="col-md-1">
                    <h>Sort : </h>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        @Html.DropDownList("sort", new SelectListItem[] {
                    new SelectListItem(){ Text="Date Time", Value = "Datetime"  },
                    new SelectListItem(){ Text="Transaction Type", Value = "TransactionType"  },
                    new SelectListItem(){ Text="Response Code", Value = "ResponseCode"  }
                    }, new
                    {
                    @class = "form-control dropdown "
                    ,
                    @name = "state"

                    })
                    </div>
                </div>
                <div style="width: 112px;" class="col-md-1">
                    <h>Order : </h>
                </div>
                <div class="col-md-2">
                    <div class="form-group">

                        @Html.DropDownList("order", new SelectListItem[] {
                    new SelectListItem(){ Text="น้อยไปมาก", Value = "asc"  },
                    new SelectListItem(){ Text="มากไปน้อย", Value = "desc"  }
                    }, new
                    {
                    @class = "form-control dropdown "
                    ,
                    @name = "state"

                    })

                    </div>
                </div>
                <div style="width: 112px;" class="col-md-1">
                    <h>Rows : </h>
                </div>

                <div class="col-md-2" style="">
                    <div class="form-group">

                        @Html.DropDownList("row", new SelectListItem[] {
                    new SelectListItem(){ Text="50", Value = "50"  },
                    new SelectListItem(){ Text="100", Value = "100"  },
                    new SelectListItem(){ Text="500", Value = "500"  },
                    new SelectListItem(){ Text="1000", Value = "1000"  }
                    }, new
                    {
                    @class = "form-control dropdown"
                    ,
                    @name = "state"

                    })

                    </div>
                </div>

            </div>

            <div class="row">

                <div class="col" id="before-submit">
                    <div id="submit">

                        <button type="button" data-toggle="modal" data-target="#WaitingModal" id="btnsearch" class="btn" style="padding:0px;" onclick="updateTable('search')">
                            <img src="~/images/icon_search.png" style="width: 50px; height: 50px" class="rounded-lg  p-0" alt="Search" />
                        </button>
                        <button type="submit" id="btnclear" data-toggle="modal" data-target="#WaitingModal" onclick="clearFunction()" class="btn" data-toggle="tooltip" name="cmdButton" title="ล้างข้อมูล" value="Clear" style="padding:0px;border: 0px; background-color: transparent;">
                            <img src="~/images/icon_delete.png" style="width: 50px; height: 50px" class="rounded-lg p-0" alt="Clear Data" />
                        </button>
                        <a id="btnSEExp" data-toggle="tooltip" title="Excel Export Report" style="cursor: pointer; padding:0px;">
                            <img src="~/images/icon_excel.png" style="width: 50px; height: 50px" class="rounded-lg  p-0" alt="Excel Export Report" />
                        </a>
                    </div>
                </div>
            </div>
        }

    </div>
</div>
<div class="container-fluid">
    <div class="row" style="background-color: #f8d5ad;width: fit-content;padding: 8px;margin-left: 3px;border-radius: 15px;font-size: 22px;font-weight: bold;margin-bottom: 15px; border:1px solid lightgrey;">

        <div class="col" style="display: flex;justify-content: center;">
            <a style="white-space:nowrap;align-items: center;display: flex;">Total Record:</a>
        </div>
        <div class="col" style="display: flex;justify-content: center;">
            <a style="white-space:nowrap;display: flex;align-items: center;background-color: rgba(255,255,255,1);padding: 10px 35px 10px 35px;border-radius: 10px;" ;="">
                <span id="recordCount">0</span>
            </a>
        </div>
    </div>
    <div class="table-container dashboard-table" style="overflow-x: hidden;">
        <table id="table-id" class="table table-striped custom-table">
            <thead id="t-header" style="">
                <tr>
                    @{
                        foreach (var head in tableHeaders)
                        {
                            <th scope="col" style="text-align:center; vertical-align: middle;text-wrap: nowrap;"> @head </th>
                        }
                    }

                </tr>
            </thead>

            <tbody>
                <tr>
                    <td colspan="14" style="text-align:center;">No data</td>
                </tr>
            </tbody>


        </table>


        <div class="row">
            <div class="col-md-2" style="z-index:2;">
                <p style="font-size:16px;font-weight:bolder;">
                    Select page :
                    @Html.DropDownList("page", new SelectListItem[] {

                    }, new
                    {
                    @class = "form-control",
                    onchange = "updateTable('page')"
                    })
                </p>
            </div>
            <div class="col colPagination" style="padding-top:10px;z-index:1;">

                <nav>
                    <div class="pagination">
                        <ul style="display:flex;">
                            <li data-page="prev" id="prev" style="visibility:hidden;" onclick="updateTable('prev')">
                                <a style="color: #7a7a7a;"> < </a>
                            </li>
                            <li id="pageButtonsContainer"></li>

                            <li data-page="next" id="next" style="visibility:hidden;" onclick=" updateTable('next')">
                                <a style="color: #7a7a7a;"> > </a>
                            </li>
                        </ul>
                    </div>
                </nav>
            </div>
        </div>

    </div>

</div>
@using (Html.BeginForm("Transaction", "Operation", FormMethod.Get, new { id = "ModalTransactionID" }))
{
    <div class="modal fade" id="myModal" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="container" style="padding: 0;">
                    <div style="padding:0;"></div>
                    <div id="terminal-info" style="display:block;border: 20px solid orange;">
                        <div class="row" style="padding-top:15px;">
                            <div class="col-md-1">
                            </div>
                            <div class="col-md-2 modelTopic">
                                <label for="no">No </label>&nbsp;:&nbsp;
                            </div>
                            <div class="col-md-3 modelTextbox">
                                @Html.TextBox("no", ViewBag.no as string, new { @class = "w-100 form-control", @readonly = "true" })
                            </div>
                            <div class="col-md-2 modelTopic">
                                <label for="seq">Seq No </label>&nbsp;:&nbsp;
                            </div>
                            <div class="col-md-3 modelTextbox">
                                @Html.TextBox("seq", ViewBag.seq as string, new { @class = "w-100 form-control", @readonly = "true" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-1">
                            </div>
                            <div class="col-md-2 modelTopic">
                                <label for="trx_datetime">Transaction DateTime </label>:
                            </div>
                            <div class="col-md-3 modelTextbox">
                                @Html.TextBox("trx_datetime", ViewBag.trx_datetime as string, new { @class = "w-100 form-control nowrap", @readonly = "true" })
                            </div>
                            <div class="col-md-2 modelTopic">
                                <label for="trx_type">Transaction Type</label>&nbsp;:&nbsp;
                            </div>
                            <div class="col-md-3 modelTextbox">
                                @Html.TextBox("trx_type", ViewBag.trx_type as string, new { @class = "w-100 form-control", @readonly = "true" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-1">
                            </div>
                            <div class="col-md-2 modelTopic">
                                <label for="bankcode">From Bank </label>&nbsp;:&nbsp;
                            </div>
                            <div class="col-md-3 modelTextbox">
                                @Html.TextBox("bankcode", ViewBag.bankcode as string, new { @class = "w-100 form-control", @readonly = "true" })
                            </div>
                            <div class="col-md-2 modelTopic">
                                <label for="s_other">To Bank </label>&nbsp;:&nbsp;
                            </div>
                            <div class="col-md-3 modelTextbox">
                                @Html.TextBox("s_other", ViewBag.s_other as string, new { @class = "w-100 form-control", @readonly = "true" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-1">
                            </div>

                        </div>

                        <div class="row">
                            <div class="col-md-1">
                            </div>
                            <div class="col-md-2 modelTopic">
                                <label for="pan_no">Card No </label>&nbsp;:&nbsp;
                            </div>
                            <div class="col-md-3 modelTextbox">
                                @Html.TextBox("pan_no", ViewBag.pan_no as string, new { @class = "w-100 form-control", @readonly = "true" })
                            </div>
                            <div class="col-md-2 modelTopic">
                                <label for="fr_accno">From Account</label>&nbsp;:&nbsp;
                            </div>
                            <div class="col-md-3 modelTextbox">
                                @Html.TextBox("fr_accno", ViewBag.fr_accno as string, new { @class = "w-100 form-control", @readonly = "true" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-1">
                            </div>
                            <div class="col-md-2 modelTopic">
                                <label for="to_accno">To Account </label>&nbsp;:&nbsp;
                            </div>
                            <div class="col-md-3 modelTextbox">
                                @Html.TextBox("to_accno", ViewBag.to_accno as string, new { @class = "w-100 form-control", @readonly = "true" })
                            </div>
                            <div class="col-md-2 modelTopic">
                                <label for="trx_status">Status</label>&nbsp;:&nbsp;
                            </div>
                            <div class="col-md-3 modelTextbox">
                                @Html.TextBox("trx_status", ViewBag.trx_status as string, new { @class = "w-100 form-control", @readonly = "true" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-1">
                            </div>
                            <div class="col-md-2 modelTopic">
                                <label for="amt1">Amount </label>&nbsp;:&nbsp;
                            </div>
                            <div class="col-md-3 modelTextbox">
                                @Html.TextBox("amt1", ViewBag.amt1 as string, new { @class = "w-100 form-control", @readonly = "true" })
                            </div>
                            <div class="col-md-2 modelTopic">
                                <label for="fee_amt1">Fee</label>&nbsp;:&nbsp;
                            </div>
                            <div class="col-md-3 modelTextbox">
                                @Html.TextBox("fee_amt1", ViewBag.fee_amt1 as string, new { @class = "w-100 form-control", @readonly = "true" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-1">
                            </div>
                            <div class="col-md-2 modelTopic">
                                <label for="retract_amt1">Retract </label>&nbsp;:&nbsp;
                            </div>
                            <div class="col-md-3 modelTextbox">
                                @Html.TextBox("retract_amt1", ViewBag.retract_amt1 as string, new { @class = "w-100 form-control", @readonly = "true" })
                            </div>
                            <div class="col-md-2 modelTopic">
                                <label for="billcounter">Bill Counter</label>&nbsp;:&nbsp;
                            </div>
                            <div class="col-md-3 modelTextbox">
                                @Html.TextBox("billcounter", ViewBag.billcounter as string, new { @class = "w-100 form-control", @readonly = "true" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-1">
                            </div>
                            <div class="col-md-2 modelTopic">
                                <label for="ejrc">Response Code </label>&nbsp;:&nbsp;
                            </div>
                            <div class="col-md-3 modelTextbox">
                                @Html.TextBox("ejrc", ViewBag.ejrc as string, new { @class = "w-100 form-control", @readonly = "true" })
                            </div>
                            <div class="col-md-2 modelTopic">
                            </div>
                            <div class="col-md-3 modelTextbox">
                            </div>
                        </div>



                    </div>


                </div>
            </div>
        </div>
    </div>
}


<script>
    function updateTable(search) {
        var terminalno = $("#terminalno").val();
        var trxtype = $("#trxtype").val();
        var todate = $("#todate").val();
        var fromdate = $("#fromdate").val();
        var status = $("#status").val();
        var row = $("#row").val();
        var page = $("#page").val();
        var sort = $("#sort").val();
        var order = $("#order").val();
        var rc = $("#rc").val();
        var prevDiv = document.getElementById("prev");
        var nextDiv = document.getElementById("next");
        if (!terminalno) {
            alert("Please Select a Terminal.");
            return;
        }
        var fromDateInput = document.getElementById("fromdate");
        var toDateInput = document.getElementById("todate");
        var fromDateValue = new Date(fromDateInput.value);
        var toDateValue = new Date(toDateInput.value);
        if (fromDateValue > toDateValue) {
            alert("Invalid Date Range. Please Select a Valid Date Range.");
            fromDateInput.value = new Date().toISOString().split('T')[0];
            toDateInput.value = new Date().toISOString().split('T')[0];
            return;
        }
        $.ajax({
            type: "GET",
            url: '@Url.Action("TransactionsFetchData", "Monitor")',
            data: {
                terminalno: terminalno,
                trxtype: trxtype,
                todate: todate,
                fromdate: fromdate,
                status: status,
                row: row,
                page: page,
                search: search,
                sort: sort,
                order: order,
                rc: rc
            },
            dataType: "json",
            success: function (data) {
                console.log(data);
                var jsondata = data.jsonData;
                var pages = data.page;
                var currentpage = data.currentPage;
                $('#recordCount').text(data.totalTerminal);
                $("#table-id tbody").empty();
                if (jsondata.length === 0) {
                    // Display a message when there is no data
                    var noDataRow = $("<tr>").append($("<td colspan='14' style='text-align:center;'>").text("No data"));
                    $("#table-id tbody").append(noDataRow);
                } else {
                    $.each(jsondata, function (index, item) {
                        var editButton = $("<td>").css("text-align", "center").append(
                            $("<img>").addClass("btn text-dark").attr({
                                id: "btnEdit",
                                "data-toggle": "modal",
                                "data-target": "#myModal",
                                src: "/Operation/images/button_view.png",
                                style: "height: 35px;width: auto;cursor: pointer;border-radius: 40px; letter-spacing: 2px;",
                                onclick: "EditButton(" +
                                    "'" + item.no + "'," +
                                    "'" + item.seq + "'," +
                                    "'" + item.trx_datetime + "'," +
                                    "'" + item.trx_type + "'," +
                                    "'" + item.bankcode + "'," +
                                    "'" + item.s_other + "'," +
                                    "'" + item.pan_no + "'," +
                                    "'" + item.fr_accno + "'," +
                                    "'" + item.to_accno + "'," +
                                    "'" + item.trx_status + "'," +
                                    "'" + item.amt1 + "'," +
                                    "'" + item.fee_amt1 + "'," +
                                    "'" + item.retract_amt1 + "'," +
                                    "'" + item.billcounter + "'," +
                                    "'" + item.rc + "'," +

                                    ")"
                            })
                        );
                        var row = $("<tr>");
                        row.append($("<td>").css("text-align", "center").css("white-space", "nowrap").text(item.no));
                        row.append(editButton);
                        row.append($("<td>").css("text-align", "center").css("white-space", "nowrap").text(item.seq));
                        row.append($("<td>").css("text-align", "center").css("white-space", "nowrap").text(item.trx_datetime));
                        row.append($("<td>").css("text-align", "center").css("white-space", "nowrap").text(item.trx_type));
                        row.append($("<td>").css("text-align", "center").css("white-space", "nowrap").text(item.bankcode));
                        row.append($("<td>").css("text-align", "center").css("white-space", "nowrap").text(item.s_other));
                        row.append($("<td>").css("text-align", "center").css("white-space", "nowrap").text(item.pan_no));
                        row.append($("<td>").css("text-align", "center").css("white-space", "nowrap").text(item.fr_accno));
                        row.append($("<td>").css("text-align", "right").css("white-space", "nowrap").text(item.to_accno));
                        row.append($("<td>").css("text-align", "center").css("white-space", "nowrap").text(item.trx_status));
                        row.append($("<td>").css("text-align", "right").css("white-space", "nowrap").text(item.amt1));
                        row.append($("<td>").css("text-align", "right").css("white-space", "nowrap").text(item.billcounter))
                        row.append($("<td>").css("text-align", "center").css("white-space", "nowrap").text(item.rc));

                        $("#table-id tbody").append(row);
                        window.scrollTo(0, 0);
                        $('.dashboard-table').doubleScroll({
                            resetOnWindowResize: true
                        });
                    });

                }
                generatePageButtons(pages, currentpage);
                if (pages >= 1) {

                    $("#page").empty();
                    for (var i = 1; i <= pages; i++) {
                        var option = $('<option>', {
                            value: i,
                            text: i
                        });
                        if (i === currentpage) {
                            option.prop("selected", true);
                        }
                        $("#page").append(option);

                    }
                }
                else {
                    $("#page").empty();
                    var option = $('<option>', {
                        value: 1,
                        text: 1
                    });
                    $("#page").append(option);

                }
                console.log(currentpage + "  " + pages + "  " + page)
                if ((currentpage == 1 || page == null) && pages > 1) {
                    prevDiv.style.visibility = "hidden";
                    nextDiv.style.visibility = "visible";

                }
                else if ((currentpage == pages) && pages > 1) {
                    prevDiv.style.visibility = "visible";
                    nextDiv.style.visibility = "hidden";

                }
                else if ((currentpage < pages) && pages > 1) {
                    prevDiv.style.visibility = "visible";
                    nextDiv.style.visibility = "visible";

                }
                else {
                    prevDiv.style.visibility = "hidden";
                    nextDiv.style.visibility = "hidden";

                }
            },
            error: function (error) {
                console.log("Error: " + JSON.stringify(error));
            }
        });
    }


    function generatePageButtons(pages, currentpage) {
        var pageButtonsContainer = $("#pageButtonsContainer");
        pageButtonsContainer.empty();

        var maxButtons = 5;
        var startPage = Math.max(1, currentpage - Math.floor(maxButtons / 2));
        var endPage = Math.min(startPage + maxButtons - 1, pages);

        for (var i = startPage; i <= endPage; i++) {
            var button = $("<a>").text(i).click(function () {
                $("#page").val($(this).text()); // Set #page value
                updateTable();
            });
            button.css({
                "display": "inline-flex",
                "align-items": "center",
                "justify-content": "center"
            });
            // Highlight the current page button
            if (i === currentpage) {
                button.addClass("current-page");
            }

            pageButtonsContainer.append(button);
        }
    }
    $("#btnSEExp").click(function (e) {
        e.preventDefault();

        var expParams = "xlsx" + '|' + $("#frDate").val() + '|' + $("#toDate").val()
            + '|' + "xlsx";
        var rptType = "xlsx";
        $.ajax({
            type: "POST",
            dataType: "json",
            data: '{ "exparams" : "' + expParams + '" }',
            contentType: 'application/json; charset=utf-8',
            url: '@Url.Action("Transaction_ExportExc", "Operation")',
            success: function (result) {
                if (result.success == 'S') {
                    var url = '@Url.Action("Transaction_DownloadExportFile", "Operation")'
                    window.location = '@Url.Action("Transaction_DownloadExportFile", "Operation")/?rpttype=' + rptType;
                }
                else { alert(result.errstr); }
            },
            error: function (err) {
                alert('@ViewBag.ErrorMsg');
            }
        });
    });

    function EditButton(no, seq, trx_datetime, trx_type, bankcode, s_other, pan_no, fr_accno,
        to_accno, trx_status, amt1, fee_amt1, retract_amt1, billcounter, rc) {
        document.getElementById('no').value = no;
        document.getElementById('seq').value = seq;
        document.getElementById('trx_datetime').value = trx_datetime;
        document.getElementById('trx_type').value = trx_type;
        document.getElementById('bankcode').value = bankcode;
        document.getElementById('s_other').value = s_other;
        document.getElementById('pan_no').value = pan_no;
        document.getElementById('fr_accno').value = fr_accno;
        document.getElementById('to_accno').value = to_accno;
        document.getElementById('trx_status').value = trx_status;
        document.getElementById('amt1').value = amt1;
        document.getElementById('fee_amt1').value = fee_amt1;
        document.getElementById('retract_amt1').value = retract_amt1;
        document.getElementById('billcounter').value = billcounter;
        document.getElementById('ejrc').value = rc;
        console.log(document.getElementById('ejrc').value);
    }

    $(document).ready(function () {
        $('.dashboard-table').doubleScroll({
            resetOnWindowResize: true
        });

        var s = $(".doubleScroll-scroll-wrapper");
        var pos = s.position();
        $(window).scroll(function () {
            var windowpos = $(window).scrollTop();
            if (windowpos >= pos.top) {
                s.addClass("fixed-scroll");
            } else {
                s.removeClass("fixed-scroll");
            }
        });
    });


    (function ($) {

        jQuery.fn.doubleScroll = function (userOptions) {

            // Default options
            var options = {
                contentElement: undefined, // Widest element, if not specified first child element will be used
                scrollCss: {
                    'overflow-x': 'auto',
                    'overflow-y': 'hidden'
                },
                contentCss: {
                    'overflow-x': 'auto',
                    'overflow-y': 'hidden'
                },
                onlyIfScroll: true, // top scrollbar is not shown if the bottom one is not present
                resetOnWindowResize: false, // recompute the top ScrollBar requirements when the window is resized
                timeToWaitForResize: 30 // wait for the last update event (usefull when browser fire resize event constantly during ressing)
            };

            $.extend(true, options, userOptions);

            // do not modify
            // internal stuff
            $.extend(options, {
                topScrollBarMarkup: '<div class="doubleScroll-scroll-wrapper" style="height: 20px;"><div class="doubleScroll-scroll" style="height: 20px;"></div></div>',
                topScrollBarWrapperSelector: '.doubleScroll-scroll-wrapper',
                topScrollBarInnerSelector: '.doubleScroll-scroll'
            });

            var _showScrollBar = function ($self, options) {

                if (options.onlyIfScroll && $self.get(0).scrollWidth <= $self.width()) {
                    // content doesn't scroll
                    // remove any existing occurrence...
                    $self.prev(options.topScrollBarWrapperSelector).remove();
                    return;
                }

                // add div that will act as an upper scroll only if not already added to the DOM
                var $topScrollBar = $self.prev(options.topScrollBarWrapperSelector);

                if ($topScrollBar.length == 0) {

                    // creating the scrollbar
                    // added before in the DOM
                    $topScrollBar = $(options.topScrollBarMarkup);
                    $self.before($topScrollBar);

                    // apply the css
                    $topScrollBar.css(options.scrollCss);
                    $self.css(options.contentCss);

                    // bind upper scroll to bottom scroll
                    $topScrollBar.bind('scroll.doubleScroll', function () {
                        $self.scrollLeft($topScrollBar.scrollLeft());
                    });

                    // bind bottom scroll to upper scroll
                    var selfScrollHandler = function () {
                        $topScrollBar.scrollLeft($self.scrollLeft());
                    };
                    $self.bind('scroll.doubleScroll', selfScrollHandler);
                }

                // find the content element (should be the widest one)
                var $contentElement;

                if (options.contentElement !== undefined && $self.find(options.contentElement).length !== 0) {
                    $contentElement = $self.find(options.contentElement);
                } else {
                    $contentElement = $self.find('>:first-child');
                }

                // set the width of the wrappers
                $(options.topScrollBarInnerSelector, $topScrollBar).width($contentElement.outerWidth());
                $topScrollBar.width($self.width());
                $topScrollBar.scrollLeft($self.scrollLeft());

            }

            return this.each(function () {

                var $self = $(this);

                _showScrollBar($self, options);

                // bind the resize handler
                // do it once
                if (options.resetOnWindowResize) {

                    var id;
                    var handler = function (e) {
                        _showScrollBar($self, options);
                    };

                    $(window).bind('resize.doubleScroll', function () {
                        // adding/removing/replacing the scrollbar might resize the window
                        // so the resizing flag will avoid the infinite loop here...
                        clearTimeout(id);
                        id = setTimeout(handler, options.timeToWaitForResize);
                    });

                }

            });

        }

    }(jQuery));
</script>