@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Transaction Summary Monitor";
}
@*<div>
    <label for="terminalId">Terminal ID:</label>
    <input type="text" id="terminalId" name="terminalId" />

    <label for="fromDate">From Date:</label>
    <input type="date" id="fromDate" name="fromDate" />

    <label for="toDate">To Date:</label>
    <input type="date" id="toDate" name="toDate" />

    <button onclick="sendDates()">Get Data</button>
</div>

<table id="resultTable" border="1">
    <!-- Table headers go here -->
    <thead>
        <tr id="headerRow">
            <th>Terminal ID</th>
        </tr>
    </thead>
    <tbody>
        <!-- Data rows will be filled dynamically via AJAX -->
    </tbody>
</table>*@
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
</head>

<style>
    .btn-light {
        border: 1px solid darkgrey;
        border-radius: 10px;
    }

    h {
        display: flex;
        justify-content: center;
    }

</style>
<style>
    .chkbox {
        text-align: left;
    }

    .my-dropdown {
        width: 100%;
        height: 38px;
    }

    input:disabled {
        background-color: #f2f2f2;
    }

    .btnsearch {
        font-size: 18px;
    }

    select.form-control {
        -webkit-appearance: button;
    }

    input.form-control {
        -webkit-appearance: button;
        border-radius: 10px;
    }


    #header_search {
        top: 20px;
        position: relative;
        background-color: orange;
        border: solid;
        padding: 8px 40px 8px 40px;
        border-radius: 12px;
        font-weight: 700;
    }

    .item {
        padding: 0px;
    }

    #submit {
        position: relative;
        top: 50px;
        background: lightgray;
        border: 10px double white;
        border-radius: 20px;
        padding: 0px 10px 0px 10px;
    }

    #before-submit {
        display: flex;
        justify-content: center;
    }

    #main_search {
        margin-bottom: 50px;
        padding: 30px 0;
        margin-left: 50px;
        margin-right: 50px;
        border: 3px solid #888888;
        background-color: white;
        border-radius: 50px;
    }

    .dropdown-toggle {
        border-radius: 10px;
    }

    th {
        text-align: center;
        vertical-align: middle;
    }

    td {
        padding: 0.5em !important;
        vertical-align: middle;
    }

    .pagination li a {
        color: black !important;
    }

    .dashboard-table .table th, .dashboard-table .table td {
        min-width: 180px;
        vertical-align: middle !important;
    }

        .dashboard-table .table th:first-child, .dashboard-table .table td:first-child {
            min-width: 140px;
        }

    .dashboard-table {
        border: 1px solid #ddd;
        border-radius: 6px;
    }
    .custom-table thead th{
        padding: 0.5em!important;
    }

    .imgDownload {
        position: sticky;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .boxDownload {
        background-color: rgba(255, 255, 255, 0.5);
        position: fixed;
        top: 0px;
        right: 0px;
        bottom: 0px;
        left: 0px;
        pointer-events: none;
        z-index: 10;
    }
</style>

<div class="content contentHeader">
    <div class="container w-auto containerHeader" style="padding-bottom: 0px;">
        <div class="row">
            <div class="col col-md-1">
            </div>
            <div class="col col-md-11">
                <a class="text-white fs-4" id="header_search">Transaction Summary Monitor</a>
            </div>
        </div>


        <div id="main_search" style="">
            @using (Html.BeginForm("TransactionSummary", "Monitor", FormMethod.Get, new { id = "x" }))
            {
                <div class="row" style="margin-top: 45px;align-items:center;    display: flex;justify-content: space-around;padding:0vw 3vw 0vw 3vw;white-space:nowrap;">
                    <div class="col-md-1" style="">
                        <h>Terminal No : </h>
                    </div>

                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        <div class="form-group">
                            <select class="selectpicker form-control subsearch" id="terminalId" name="terminalId" data-live-search="true">

                                <option data-tokens="" value="">--</option>
                                @foreach (var item in ViewBag.CurrentTID)
                                {
                                    if (@item.TERM_ID != @ViewBag.TermID)
                                    {
                                        <option value=@item.TERM_ID data-tokens=@item.TERM_ID>@item.TERM_SEQ : @item.TERM_ID : @item.TERM_NAME</option>
                                    }
                                    else
                                    {
                                        <option value=@item.TERM_ID data-tokens=@item.TERM_ID selected>@item.TERM_SEQ : @item.TERM_ID : @item.TERM_NAME</option>

                                    }
                                }

                            </select>
                        </div>
                    </div>
                    <div class="col col-md-1" style="">
                        <h>Terminal Type : </h>
                    </div>

                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        <div class="form-group">
                            <!--		Show Numbers Of Rows 		-->
                            <div class="dropdown bootstrap-select form-control subsearch input-validation-error">
                                <select class="form-control selectpicker subsearch input-validation-error" id="terminalType" name="terminalType">
                                    <option value="">All</option>
                                    <option value="G165">ATM</option>
                                    <option value="G262">ADM</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col col-md-1" style="">
                        <h>Transaction Type : </h>
                    </div>
                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        <select class="selectpicker form-control subsearch" id="transactionType" name="transactionType" data-live-search="true">
                            <option data-tokens="" value="">--</option>
                            <option value="Deposit">Deposit</option>
                            <option value="Withdraw">Withdraw</option>
                            <option value="Receipt">Receipt</option>
                        </select>
                    </div>
                </div>
                <div class="row" style="margin-top: 45px;align-items:center;    display: flex;justify-content: space-around;padding:0vw 3vw 0vw 3vw;white-space:nowrap;">
                    <div class="col-md-1">
                        <label>From Date : </label>
                    </div>
                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        <input class="form-control subsearch" id="fromDate" name="fromDate" placeholder="yyyy-mm-dd" type="Date" value="2020-05-01">
                    </div>
                    <div class="col-md-1">
                        <label>To Date : </label>
                    </div>
                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        <input class="form-control subsearch" id="toDate" name="toDate" placeholder="yyyy-mm-dd" type="Date" value="2030-12-31">
                    </div>
                    <div class="col col-md-1" style="">
                    </div>
                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                    </div>
                </div>
                <div class="row justify-content-md-center" style="">


                    <div class="col" id="before-submit">
                        <div id="submit">
                            <button type="button" data-toggle="modal" data-target="#WaitingModal" id="btnsearch" class="btn" style="padding:0px;" onclick="sendDates()">
                                <img src="~/images/icon_search.png" style="width: 50px; height: 50px" class="rounded-lg  p-0" alt="Search" />
                            </button>

                            <button type="submit" id="btnclear" class="btn" data-toggle="tooltip" name="cmdButton" title="ล้างข้อมูล" value="Clear" style="padding:0px;border: 0px; background-color: transparent;">
                                <img src="~/images/icon_refresh.png" style="width: 40px; height: 38px" class="rounded-lg p-0" alt="Clear Data" />
                            </button>


                            <a id="btnSEExp" data-toggle="tooltip" title="Excel Export Report" style="cursor: pointer; padding:0px;">
                                <img src="~/images/icon_excel.png" style="width: 50px; height: 50px" class="rounded-lg  p-0" alt="Excel Export Report" />
                            </a>
                        </div>
                    </div>

                </div>

            }

        </div>



    </div>

</div>
<div class="container-fluid">

    <div class="table-responsive dashboard-table" style="overflow-x: hidden;">
        <table id="resultTable" class="table table-striped custom-table">

            <thead>
                <tr>
                    <th colspan="6" style="text-align:center">Waiting For Search </th>
                </tr>
            </thead>

            <tbody>
            <td colspan="6" style="text-align:center"> No Data </td>
            </tbody>


        </table>

    </div>
</div>
<div class="boxDownload" id="boxDownload" style="display: none;">
    <img class="imgDownload" src="~/images/loading.gif">
    </div>
<script>
    var today = new Date();
    var yesterday = new Date(today);
    yesterday.setDate(today.getDate() - 1);
    var formattedDate = yesterday.toISOString().slice(0, 10);
    document.getElementById("fromDate").value = formattedDate;
    var formattedDate2 = today.toISOString().slice(0, 10);
    document.getElementById("toDate").value = formattedDate2;


    function sendDates() {
        var fromDateInput = document.getElementById("fromDate");
        var toDateInput = document.getElementById("toDate");
        var fromDateValue = new Date(fromDateInput.value);
        var toDateValue = new Date(toDateInput.value);
        if (isNaN(fromDateValue) || isNaN(toDateValue)) {
            alert("Invalid Date Format. Please enter valid dates.");
            return;
        }
        if (fromDateValue > toDateValue) {
            alert("Invalid Date Range. Please Select a Valid Date Range.");
            fromDateInput.value = new Date().toISOString().split('T')[0];
            toDateInput.value = new Date().toISOString().split('T')[0];
            return;
        }
        if (fromDateValue && toDateValue) {

        } else {
            alert("Please select both fromdate and todate.");
            return;
        }
        document.getElementById("boxDownload").style.display = "block";
        $('body').css('pointer-events', 'none');
        var terminalId = document.getElementById("terminalId").value;
        var fromDate = document.getElementById("fromDate").value;
        var toDate = document.getElementById("toDate").value;
        var terminalType = document.getElementById("terminalType").value;
        var transactionType = document.getElementById("transactionType").value;

        var xhr = new XMLHttpRequest();
        xhr.open("POST", '@Url.Action("GetTerminalData", "Monitor")', true);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
                var response = JSON.parse(xhr.responseText);
                updateTable(response);
            }
        };
        var data = JSON.stringify({ terminalId: terminalId, fromDate: fromDate, toDate: toDate, terminalType: terminalType, transactionType: transactionType });
        xhr.send(data);
    }

    function updateTable(data) {
        console.log(data);
  

        var table = document.getElementById("resultTable");
        table.innerHTML = ""; // Clear existing table

        // Create thead element and append it to the table
        var thead = document.createElement("thead");
        table.appendChild(thead);

        // Create table header
        var headerRow = thead.insertRow();
        for (var key in data[0]) {
            if (data[0].hasOwnProperty(key)) {
                var headerCell = document.createElement("th");
                key = key.replace(/_/g, '');
                headerCell.textContent = key;
                headerRow.appendChild(headerCell);
            }
        }

        // Create tbody element and append it to the table
        var tbody = document.createElement("tbody");
        table.appendChild(tbody);

        // Populate table with data
        data.forEach(function (row) {
            var newRow = tbody.insertRow();
            var columnIndex = 0;
            for (var key in row) {
                if (row.hasOwnProperty(key)) {
                    var cell = newRow.insertCell();
                    cell.textContent = row[key];
                    columnIndex++;
                    if (columnIndex === 1) {
                        cell.style.textAlign = "center";
                        cell.style.width = "min-conten t";
                    }
                    else if (columnIndex === 2) {
                        cell.style.textAlign = "center";
                        cell.style.width = "max-content";
                    }
                    else if (columnIndex === 3){
                        cell.style.textAlign = "left";
                        cell.style.width = "max-content";
                    }
                    else if (columnIndex === 4) {
                        cell.style.textAlign = "center";
                        cell.style.width = "max-content";
                    }
                    else if (columnIndex === 5) {
                        cell.style.textAlign = "center";
                        cell.style.width = "max-content";
                    }
                    else{
                        cell.style.textAlign = "right";
                        cell.style.width = "min-content";
                    }

                }
            }
        });
        window.scrollTo(0, 0);
        $('.dashboard-table').doubleScroll({
            resetOnWindowResize: true
        });
        $('#boxDownload').hide();
        $('body').css('pointer-events', 'auto');
    }
    $("#btnSEExp").click(function (e) {
        document.getElementById("boxDownload").style.display = "block";
        $('body').css('pointer-events', 'none');
        e.preventDefault();
        var terminalId = document.getElementById("terminalId").value;
        var fromDate = document.getElementById("fromDate").value;
        var toDate = document.getElementById("toDate").value;
        var terminalType = document.getElementById("terminalType").value;
        var transactionType = document.getElementById("transactionType").value;
        var rptType = "xlsx";
        $.ajax({
            type: "Get",
            dataType: "json",
            data: {
                terminalId: terminalId,
                fromDate: fromDate,
                toDate: toDate,
                terminalType: terminalType,
                transactionType: transactionType
            },
            contentType: 'application/json; charset=utf-8',
            url: '@Url.Action("TransactionSummary_ExportExc", "Monitor")',
            success: function (result) {
                if (result.success == 'S') {
                    var url = '@Url.Action("DownloadExportFile_TransactionSummary", "Monitor")'
                    window.location = '@Url.Action("DownloadExportFile_TransactionSummary", "Monitor")/?rpttype=' + rptType + '&transactionType=' + transactionType;
                    $('#boxDownload').hide();
                    $('body').css('pointer-events', 'auto');
                }
                else { 
                    alert(result.errstr);
                    $('#boxDownload').hide();
                    $('body').css('pointer-events', 'auto');
                }
            },
            error: function (err) {
                alert('@ViewBag.ErrorMsg');
                $('#boxDownload').hide();
                $('body').css('pointer-events', 'auto');
            }
        });

       
    });

    $(document).ready(function () {
        $('.dashboard-table').doubleScroll({
            resetOnWindowResize: true
        });

        var s = $(".doubleScroll-scroll-wrapper");
        var pos = s.position();
        $(window).scroll(function () {
            var windowpos = $(window).scrollTop();
            if (windowpos >= pos.top) {
                s.addClass("fixed-scroll");
            } else {
                s.removeClass("fixed-scroll");
            }
        });
    });


    (function ($) {

        jQuery.fn.doubleScroll = function (userOptions) {

            // Default options
            var options = {
                contentElement: undefined, // Widest element, if not specified first child element will be used
                scrollCss: {
                    'overflow-x': 'auto',
                    'overflow-y': 'hidden'
                },
                contentCss: {
                    'overflow-x': 'auto',
                    'overflow-y': 'hidden'
                },
                onlyIfScroll: true, // top scrollbar is not shown if the bottom one is not present
                resetOnWindowResize: false, // recompute the top ScrollBar requirements when the window is resized
                timeToWaitForResize: 30 // wait for the last update event (usefull when browser fire resize event constantly during ressing)
            };

            $.extend(true, options, userOptions);

            // do not modify
            // internal stuff
            $.extend(options, {
                topScrollBarMarkup: '<div class="doubleScroll-scroll-wrapper" style="height: 20px;"><div class="doubleScroll-scroll" style="height: 20px;"></div></div>',
                topScrollBarWrapperSelector: '.doubleScroll-scroll-wrapper',
                topScrollBarInnerSelector: '.doubleScroll-scroll'
            });

            var _showScrollBar = function ($self, options) {

                if (options.onlyIfScroll && $self.get(0).scrollWidth <= $self.width()) {
                    // content doesn't scroll
                    // remove any existing occurrence...
                    $self.prev(options.topScrollBarWrapperSelector).remove();
                    return;
                }

                // add div that will act as an upper scroll only if not already added to the DOM
                var $topScrollBar = $self.prev(options.topScrollBarWrapperSelector);

                if ($topScrollBar.length == 0) {

                    // creating the scrollbar
                    // added before in the DOM
                    $topScrollBar = $(options.topScrollBarMarkup);
                    $self.before($topScrollBar);

                    // apply the css
                    $topScrollBar.css(options.scrollCss);
                    $self.css(options.contentCss);

                    // bind upper scroll to bottom scroll
                    $topScrollBar.bind('scroll.doubleScroll', function () {
                        $self.scrollLeft($topScrollBar.scrollLeft());
                    });

                    // bind bottom scroll to upper scroll
                    var selfScrollHandler = function () {
                        $topScrollBar.scrollLeft($self.scrollLeft());
                    };
                    $self.bind('scroll.doubleScroll', selfScrollHandler);
                }

                // find the content element (should be the widest one)
                var $contentElement;

                if (options.contentElement !== undefined && $self.find(options.contentElement).length !== 0) {
                    $contentElement = $self.find(options.contentElement);
                } else {
                    $contentElement = $self.find('>:first-child');
                }

                // set the width of the wrappers
                $(options.topScrollBarInnerSelector, $topScrollBar).width($contentElement.outerWidth());
                $topScrollBar.width($self.width());
                $topScrollBar.scrollLeft($self.scrollLeft());

            }

            return this.each(function () {

                var $self = $(this);

                _showScrollBar($self, options);

                // bind the resize handler
                // do it once
                if (options.resetOnWindowResize) {

                    var id;
                    var handler = function (e) {
                        _showScrollBar($self, options);
                    };

                    $(window).bind('resize.doubleScroll', function () {
                        // adding/removing/replacing the scrollbar might resize the window
                        // so the resizing flag will avoid the infinite loop here...
                        clearTimeout(id);
                        id = setTimeout(handler, options.timeToWaitForResize);
                    });

                }

            });

        }

    }(jQuery));
</script>