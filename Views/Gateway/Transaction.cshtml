@{
    byte[]? usernameBytes;
    if (Context.Session.TryGetValue("username", out usernameBytes))
    {
        string username = System.Text.Encoding.UTF8.GetString(usernameBytes);
    }
    else
    {
        Context.Response.Redirect("~/Home/Login");
    }
}
@model PagedList.IPagedList<SLA_Management.Models.OperationModel.GatewayTransaction>
@{
    ViewData["Title"] = "Gateway ";
    string[] tableHeaders = new string[]
    {
    "ID",
    "Seqno ",
    "ThaiID",
    "PhoneOTP ",
    "AcctNoTo ",
    "FromBank ",
    "Transtype ",
    "TransDateTime ",
    "TerminalID ",
    "Amount ",
    "Status",
    "ResultCode"
    };

    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <!-- Required meta tags -->
    <title>transaction page</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
</head>

<style>
    .bootstrap-select > .dropdown-toggle {
        border-color: #ced4da;
        background-color: transparent;
        position: relative;
        width: 100%;
        text-align: right;
        white-space: nowrap;
        display: -webkit-inline-box;
        display: -webkit-inline-flex;
        display: -ms-inline-flexbox;
        display: inline-flex;
        -webkit-box-align: center;
        -webkit-align-items: center;
        -ms-flex-align: center;
        align-items: center;
        -webkit-box-pack: justify;
        -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
        justify-content: space-between;
    }
</style>

<style>
    .chkbox {
        text-align: left;
    }

    .my-dropdown {
        width: 100%;
        height: 38px;
    }

    input:disabled {
        background-color: #f2f2f2;
    }

    .btnsearch {
        font-size: 18px;
    }

    select.form-control {
        -webkit-appearance: button;
    }

    input.form-control {
        -webkit-appearance: button;
        border-radius: 10px;
    }


    #header_search {
        top: 20px;
        position: relative;
        background-color: orange;
        border: solid;
        padding: 8px 40px 8px 40px;
        border-radius: 12px;
        font-weight: 700;
    }

    .item {
        padding: 0px;
    }

    #submit {
        position: relative;
        top: 50px;
        background: lightgray;
        border: 10px double white;
        border-radius: 20px;
        padding: 0px 10px 0px 10px;
    }

    #before-submit {
        display: flex;
        justify-content: center;
    }

    #main_search {
        margin-bottom: 50px;
        padding: 30px 0;
        margin-left: 50px;
        margin-right: 50px;
        border: 3px solid #888888;
        background-color: white;
        border-radius: 50px;
    }

    .dropdown-toggle {
        border-radius: 10px;
    }

    th {
        text-align: center;
    }

    .form-group {
        margin-bottom: 1em;
    }
</style>


<div class="container w-auto containerHeader">

    <div class="row">
        <div class="col col-md-1">
        </div>
        <div class="col col-md-4">
            <a class="text-white fs-4" id="header_search">Gateway Transaction</a>
        </div>
    </div>

    <div id="main_search">

        @using (Html.BeginForm("Transaction", "Gateway", FormMethod.Get, new { id = "GatewayDateRecheckDate" }))
        {
            <div class="row" style="margin-top: 35px;display: flex;align-items: center;justify-content: center;">

                <div class="col-md-1" style="width: 112px;">
                    <h>Terminal ID : </h>
                </div>
                <div class="col-md-2 " style="">
                    <div class="">
                        <span class=""><i class="glyphicon glyphicon-calendar"></i></span>
                        @Html.TextBox("terminalno", ViewBag.CurrentTerminalno as string, new { @class = "form-control subsearch", @placeholder = "Terminal ID"})
                    </div>
                </div>

                <div class="col-md-1" style="width: 112px;">
                    <h>From Date : </h>
                </div>
                <div class="col-md-2 " style="">
                    <div class="">
                        <span class=""><i class="glyphicon glyphicon-calendar"></i></span>
                        @Html.TextBox("fromdate", ViewBag.CurrentFr as string, new { @class = "form-control subsearch", @placeholder = "dd/mm/yyyy", @type = "date", @min = "1997-01-01", @max = "2030-12-31" ,@onfocus="(this.type='date')"})
                    </div>
                </div>
                <div class="col-md-1" style="width: 112px;">
                    <h>To Date : </h>
                </div>
                <div class="col-md-2" style="">
                    <div class="">
                        <span class=""><i class="glyphicon glyphicon-calendar"></i></span>
                        @Html.TextBox("todate", ViewBag.CurrentTo as string, new { @class = "form-control subsearch", @placeholder = "dd/mm/yyyy", @type = "date", @min = "01-01-1997", @max = "31-12-2030" ,@pattern="dd/mm/yyyy" })
                    </div>
                </div>
            </div>
            <div class="row" style="margin-top: 35px;display: flex;align-items: center;justify-content: center;">


                <div class="col-md-1" style="width: 112px;">
                    <h>Account To : </h>
                </div>
                <div class="col-md-2" style="">
                    <div class="">
                        <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                        @Html.TextBox("acctnoto", ViewBag.CurrentAcctnoto as string, new { @class = "form-control subsearch", @placeholder = "Account No" })
                    </div>
                </div>
                <div class="col-md-1" style="width: 112px;">
                    <h>Trx Type : </h>
                </div>
                <div class="col-md-2" style="">

                    <div class="form-group">
                        @Html.DropDownList("transtype", new SelectListItem[] {
                    new SelectListItem(){ Text="ALL", Value = ""  },
                    new SelectListItem(){ Text="DEP : Deposit", Value = "DEP"  },
                    new SelectListItem(){ Text="PAY : Payment", Value = "PAY"  }
                    }, new
                    {
                    @class = "form-control dropdown"
                    ,
                    @name = "state"
                    })
                    </div>
                </div>
                <div class="col-md-1" style="width: 112px;">
                    <h>Status : </h>
                </div>
                <div class="col-md-2" style="">
                    <div class="form-group">
                        @Html.DropDownList("status", new SelectListItem[] {
                    new SelectListItem(){ Text="ALL", Value = ""  },
                    new SelectListItem(){ Text="Y : Succeed", Value = "Y"  },
                    new SelectListItem(){ Text="N : Failed", Value = "N"  }
                    }, new
                    {
                    @class = "form-control dropdown"
                    ,
                    @name = "state"
                    })
                    </div>
                </div>
            </div>

            <div class="row " style="margin-top: 35px;display: flex;align-items: center;justify-content: center;">

                <div style="width: 112px;" class="col-md-1">
                    <h>Rows : </h>
                </div>

                <div class="col-md-2" style="">
                    <div class="form-group">

                        @Html.DropDownList("row", new SelectListItem[] {
                    new SelectListItem(){ Text="20", Value = "20"  },
                    new SelectListItem(){ Text="100", Value = "100"  },
                    new SelectListItem(){ Text="500", Value = "500"  }
                    }, new
                    {
                    @class = "form-control dropdown"
                    ,
                    @name = "state"

                    })

                    </div>
                </div>
                <div style="width: 112px;" class="col-md-1">
                    <h>Sort : </h>
                </div>
                <div class="col-md-2">
                    <div class="form-group">

                        @Html.DropDownList("sort", new SelectListItem[] {
                    new SelectListItem(){ Text="ASC", Value = "asc"  },
                    new SelectListItem(){ Text="DESC", Value = "desc"  }
                    }, new
                    {
                    @class = "form-control dropdown"
                    ,
                    @name = "state"

                    })

                    </div>
                </div>
                <div style="width: 112px;" class="col-md-1"></div>
                <div class="col-md-2"></div>
            </div>

            <div class="row">

                <div class="col" id="before-submit">
                    <div id="submit">

                        <button type="button" data-toggle="modal" data-target="#WaitingModal" id="btnsearch" class="btn" style="padding:0px;" onclick="updateTable('search')">
                            <img src="~/images/icon_search.png" style="width: 50px; height: 50px" class="rounded-lg  p-0" alt="Search" />
                        </button>
                        <button type="submit" id="btnclear" data-toggle="modal" data-target="#WaitingModal" onclick="clearFunction()" class="btn" data-toggle="tooltip" name="cmdButton" title="ล้างข้อมูล" value="Clear" style="padding:0px;border: 0px; background-color: transparent;">
                            <img src="~/images/icon_delete.png" style="width: 50px; height: 50px" class="rounded-lg p-0" alt="Clear Data" />
                        </button>
                        <a id="btnSEExp" data-toggle="tooltip" title="Excel Export Report" style="cursor: pointer; padding:0px;">
                            <img src="~/images/icon_excel.png" style="width: 50px; height: 50px" class="rounded-lg  p-0" alt="Excel Export Report" />
                        </a>
                    </div>
                </div>
            </div>
        }

    </div>
</div>
<div class="container-fluid">
    <div class="table-responsive" style="overflow-x: hidden;">
        <table id="table-id" class="table table-striped custom-table" aria-describedby="table">

            <thead id="t-header" style="">
                <tr>
                    @{
                        foreach (var head in tableHeaders)
                        {
                            <th scope="col" style="text-align:center"> @head </th>
                        }
                    }

                </tr>
            </thead>

            <tbody>
                <tr>
                    <td colspan="12" style="text-align:center;">No data</td>
                </tr>
            </tbody>


        </table>


        <div class="row">
            <div class="col-md-2" style="z-index:2;">
                <p style="font-size:16px;font-weight:bolder;">
                    Select page :
                    @Html.DropDownList("page", new SelectListItem[] {

                    }, new
                    {
                    @class = "form-control",
                    onchange = "updateTable()"
                    })
                </p>
            </div>
            <div class="col colPagination" style="padding-top:10px;z-index:1;">

                <nav>
                    <div class="pagination">
                        <ul style="display:flex;">
                            <li data-page="prev" id="prev" style="visibility:hidden;" onclick="updateTable('prev')">
                                <a style="color: #7a7a7a;"> < </a>
                            </li>
                            <li id="pageButtonsContainer"></li>

                            <li data-page="next" id="next" style="visibility:hidden;" onclick=" updateTable('next')">
                                <a style="color: #7a7a7a;"> > </a>
                            </li>
                        </ul>
                    </div>
                </nav>
            </div>
        </div>

    </div>

</div>


<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog modal-xl" style="display: flex;justify-content: center;;width: 600px;">
        <div class="modal-content" style="padding: 0.5rem 3rem 0.5rem 3rem;">
            <form id="changePasswordForm" class="form" role="form" aria-label="changePasswordForm">
                <div class="fs-5 text-black" style="margin-bottom:1rem;bottom:0.5rem;">Change Password</div>
                <div class="form-group">
                    <small><p style="color:black;    margin-block-end: 0;">Username</p></small>
                    <input name="username" id="emailInput" class="form-control form-control-sm" type="text" required="" value="@Context.Session.GetString("username")" readonly>
                </div>
                <div class="form-group">
                    <small><p style="color:red;    margin-block-end: 0;">Reqiure*</p></small>
                    <small><p style="color:black;    margin-block-end: 0;">Old Password</p></small>
                    <input name="oldPassword" id="oldPasswordInput" placeholder="Old Password" class="form-control form-control-sm" type="password" required="" aria-describedby="passwordHelpBlock">
                </div>
                <div class="form-group">
                    <small><p style="color:red;    margin-block-end: 0;">Reqiure*</p></small>
                    <small><p style="color:black;    margin-block-end: 0;">New Password</p></small>
                    <input name="newPassword" id="newPasswordInput" placeholder="New Password" class="form-control form-control-sm" type="password" required="">
                </div>
                <div class="form-group">
                    <small><p style="color:red;    margin-block-end: 0;">Reqiure*</p></small>
                    <small><p style="color:black;    margin-block-end: 0;">Confirm Password</p></small>
                    <input name="confirmPassword" id="confirmPasswordInput" placeholder="Confirm Password" class="form-control form-control-sm" type="password" required="">
                </div>
                <div class="form-group" style="display: flex;justify-content: center;">
                    <button type="button" class="btn btn-primary btn-block" onclick="confirmAction_cp('change password')">Confirm</button>
                </div>
                <div id="successMessage" style="color: green;"></div>
                <div id="errorMessage" style="color: red;"></div>
            </form>
        </div>
    </div>

</div>

<div class="modal fade" id="myModal_user" role="dialog">
    <div class="modal-dialog modal-xl" style="display: flex;justify-content: center;width: 600px;">
        <div class="modal-content" style="padding: 0.5rem 3rem 0.5rem 3rem;">
            <form id="resetPasswordForm" class="form" role="form" aria-label="resetPasswordForm">
                <div class="fs-5 text-black" style="margin-bottom:1rem;bottom:0.5rem;">Reset/Delete User</div>
                <div class="form-group">
                    <small><p style="color:black;    margin-block-end: 0;">Username</p></small>
                    <select id="SelectedUserId" name="SelectedUserId" class="form-control">
                        <option value="">Select User</option>
                        @foreach (var user in ViewBag.UserList)
                        {
                            <option value="@user.Username">@user.Username</option>
                        }
                    </select>
                </div>

                <div class="form-group" style="display: flex;justify-content: space-evenly;">
                    <button type="button" class="btn btn-primary btn-block" onclick="confirmAction('delete')">Delete</button>
                    <button type="button" class="btn btn-primary btn-block" onclick="confirmAction('reset')">Reset</button>
                </div>
                <div id="successMessage_rd" style="color: green;"></div>
                <div id="errorMessage_rd" style="color: red;"></div>
            </form>
        </div>
    </div>

</div>
<div class="modal fade" id="myModel_create" role="dialog">
    <div class="modal-dialog modal-xl" style="display: flex;justify-content: center;width: 600px;">
        <div class="modal-content" style="padding: 0.5rem 3rem 0.5rem 3rem;">
            <!-- Your form for creating a user -->
            <form id="createUserForm" class="form" role="form" aria-label="createUserForm">
                <div class="fs-5 text-black" style="margin-bottom:1rem;bottom:0.5rem;">Create User</div>
                <div class="form-group">
                    <small><p style="color:black;margin-block-end: 0;">Username</p></small>
                    <input class="form-control form-control-sm" type="text" id="username_create" name="username" required>
                </div>
                <div class="form-group">
                    <small><p style="color:black;    margin-block-end: 0;">Password</p></small>
                    <input class="form-control form-control-sm" type="password" id="password_create" name="password" required>
                </div>
                <div class="form-group">
                    <small><p style="color:black;    margin-block-end: 0;">Confirm Password</p></small>
                    <input class="form-control form-control-sm" type="password" id="confirmPassword_create" name="confirmPassword" required>
                </div>
                <div class="form-group">
                    <small><p style="color:black;    margin-block-end: 0;">Role</p></small>
                    <select class="form-control form-control-sm" id="role_create" name="role" required>
                        <!-- Options will be dynamically added based on the user's role -->
                    </select>
                </div>
                <div class="form-group" style="display:flex; justify-content:center;">
                    <button class="btn btn-primary btn-block" type="button" id="submitCreateUser">Create User</button>
                </div>
                <div id="successMessage_create" style="color: green;"></div>
                <div id="errorMessage_create" style="color: red;"></div>
            </form>
        </div>
    </div>
</div>
<script>
    setInterval(function () {
        // Use an AJAX request to check the session status on the server
        $.ajax({
            url: '@Url.Action("CheckSession", "Home")', // Adjust the URL based on your controller/action
            method: 'GET',
            success: function (result) {
                if (!result) {
                    // Session is null or expired, redirect to login page
                    window.location.href = '@Url.Action("Login", "Home")'; // Adjust the URL based on your controller/action
                }
            },
            error: function (error) {
                console.error('Error checking session:', error);
            }
        });
    }, 2000);
    var userRole = @Context.Session.GetInt32("role");

    // Function to update role options based on user's role
    function updateRoleOptions() {
        // Clear existing options
        $('#role_create').empty();

        // Define role names
        var roleNames = ["Administrator", "Operator", "Customer"];

        // Add options based on user's role
        for (var i = userRole; i <= 2; i++) {
            $('#role_create').append('<option value="' + i + '">' + i + " : " + roleNames[i] + '</option>');

        }

    }

    // Initial update based on user's role
    updateRoleOptions();
    $(document).ready(function () {
        $("#changePasswordForm").submit(function (event) {
            event.preventDefault();

            var formData = $(this).serialize();
            console.log("test " + formData);
            $.ajax({
                type: "POST",
                url: "@Url.Action("ChangePassword", "Home")",
                data: formData,
                success: function (response) {
                    if (response.success) {
                        // Password changed successfully
                        $("#successMessage").text(response.message);
                        window.location.href = "@Url.Action("Logout", "Home")";
                        // You can also close the modal or perform any other actions
                    } else {
                        // Display error message
                        $("#errorMessage").text(response.message);
                    }
                },
                error: function () {
                    // Handle the error
                }
            });
        });
    });
    function confirmAction(action) {
        var confirmationMessage = "Are you sure you want to " + action + " this user?";
        if (confirm(confirmationMessage)) {
            // User clicked OK, proceed with form submission
            submitForm(action);
        }
        console.log(action);
    }
    function confirmAction_cp(action) {
        var confirmationMessage = "Are you sure you want to " + action + " this user?";
        if (confirm(confirmationMessage)) {
            // User clicked OK, proceed with form submission
            submitForm_cp(action);
        }
        console.log(action);
    }
    function submitForm(action) {
        // Set the data-action attribute dynamically based on the action
        $('#resetPasswordForm').data('action', action);
        // Trigger the form submission
        $('#resetPasswordForm').submit();
        console.log(action); // This will log the correct action now
    }
    function submitForm_cp(action) {
        // Set the data-action attribute dynamically based on the action
        $('#changePasswordForm').data('action', action);
        // Trigger the form submission
        $('#changePasswordForm').submit();
        console.log(action); // This will log the correct action now
    }
    $(document).ready(function () {
        $("#resetPasswordForm").submit(function (event) {
            event.preventDefault();
            // Get the select element
            var selectElement = document.getElementById("SelectedUserId");
            var selectedValue = selectElement.value;
            var action = $(this).data('action');

            $.ajax({
                type: "POST",
                url: action === 'reset' ? "@Url.Action("ResetPassword", "Home")" : "@Url.Action("DeleteUser", "Home")",
                data: { username: selectedValue },
                success: function (response) {
                    if (response.success) {
                        // Display success message
                        $("#successMessage_rd").text(response.message);
                    } else {
                        // Display error message
                        $("#errorMessage_rd").text(response.message);
                    }
                },
                error: function () {
                   
                }
            });
        });
    });
    $(document).ready(function () {
        // Submit form
        $("#submitCreateUser").click(function () {
            // Collect form data
            var formData = {
                username: $("#username_create").val(),
                password: $("#password_create").val(),
                confirmPassword: $("#confirmPassword_create").val(),
                role: $("#role_create").val(),
                // Add more fields as needed
            };

            // Check if passwords match
            if (formData.password !== formData.confirmPassword) {
                alert("Passwords do not match!");
                return; // Stop further processing
            }

            // Send data to the server using AJAX
            $.ajax({
                type: "POST",
                url: "@Url.Action("CreateUser", "Home")", // Replace with your actual controller and action
                data: formData,
                success: function (response) {
                    // Handle success (e.g., close modal, show message, etc.)
                    console.log(response);
                    if (response.success === true) {
                        // Display success message
                        $("#successMessage_create").text(response.message);
                        $("#username_create").val('');
                        $("#password_create").val('');
                        $("#confirmPassword_create").val('');
                    } else if (response.success === false) {
                        // Display error message
                        $("#errorMessage_create").text(response.message);
                        $("#password_create").val('');
                    }
                    else{
                        $("#errorMessage_create").text(response.message);
                    }
                   
                },
                error: function (error) {
                    // Handle error (e.g., show error message)
                    $("#errorMessage_create").text(response.message);
                    console.log(error);
                }
            });
        });
    });
    function updateTable(search) {
        var terminalno = $("#terminalno").val();
        var acctnoto = $("#acctnoto").val();
        var transtype = $("#transtype").val();
        var todate = $("#todate").val();
        var fromdate = $("#fromdate").val();
        var status = $("#status").val();
        var row = $("#row").val();
        var page = $("#page").val();
        var sort = $("#sort").val();
        var prevDiv = document.getElementById("prev");
        var nextDiv = document.getElementById("next");
        $.ajax({
            type: "GET",
            url: '@Url.Action("GatewayFetchData", "Gateway")',
            data: {
                terminalno: terminalno,
                acctnoto: acctnoto,
                transtype: transtype,
                todate: todate,
                fromdate: fromdate,
                status: status,
                row: row,
                page: page,
                search: search,
                sort: sort
            },
            dataType: "json",
            success: function (data) {

                var jsondata = data.jsonData;
                var pages = data.page;
                var currentpage = data.currentPage;

                $("#table-id tbody").empty();
                if (jsondata.length === 0) {
                    // Display a message when there is no data
                    var noDataRow = $("<tr>").append($("<td colspan='12' style='text-align:center;'>").text("No data"));
                    $("#table-id tbody").append(noDataRow);
                } else {
                    $.each(jsondata, function (index, item) {
                        var row = $("<tr>");
                        row.append($("<td>").css("text-align", "center").text(item.id));
                        row.append($("<td>").css("text-align", "center").text(item.seqNo));
                        row.append($("<td>").css("text-align", "center").text(item.thaiID));
                        row.append($("<td>").css("text-align", "center").text(item.phoneOTP));
                        row.append($("<td>").css("text-align", "center").text(item.acctNoTo));
                        row.append($("<td>").css("text-align", "center").text(item.fromBank));
                        row.append($("<td>").css("text-align", "center").text(item.transType));
                        row.append($("<td>").css("text-align", "right").text(item.transDateTime));
                        row.append($("<td>").css("text-align", "center").text(item.terminalNo));
                        row.append($("<td>").css("text-align", "right").text(item.amount));
                        row.append($("<td>").css("text-align", "center").text(item.updateStatus));
                        row.append($("<td>").text(item.errorCode));
                        $("#table-id tbody").append(row);
                        window.scrollTo(0, 0);
                    });
                    generatePageButtons(pages, currentpage);
                }
                if (pages >= 1) {

                    $("#page").empty();
                    for (var i = 1; i <= pages; i++) {
                        var option = $('<option>', {
                            value: i,
                            text: i
                        });
                        if (i === currentpage) {
                            option.prop("selected", true);
                        }
                        $("#page").append(option);

                    }
                }
                else {
                    $("#page").empty();
                    var option = $('<option>', {
                        value: 1,
                        text: 1
                    });
                    $("#page").append(option);

                }
                console.log(currentpage + "  " + pages + "  " + page)
                if ((currentpage == 1 || page == null) && pages > 1) {
                    prevDiv.style.visibility = "hidden";
                    nextDiv.style.visibility = "visible";

                }
                else if ((currentpage == pages) && pages > 1) {
                    prevDiv.style.visibility = "visible";
                    nextDiv.style.visibility = "hidden";

                }
                else if ((currentpage < pages) && pages > 1) {
                    prevDiv.style.visibility = "visible";
                    nextDiv.style.visibility = "visible";

                }
                else {
                    prevDiv.style.visibility = "hidden";
                    nextDiv.style.visibility = "hidden";

                }
            },
            error: function (error) {
                console.log("Error: " + JSON.stringify(error));
            }
        });
    }


    function generatePageButtons(pages, currentpage) {
        var pageButtonsContainer = $("#pageButtonsContainer");
        pageButtonsContainer.empty();

        var maxButtons = 5;
        var startPage = Math.max(1, currentpage - Math.floor(maxButtons / 2));
        var endPage = Math.min(startPage + maxButtons - 1, pages);

        for (var i = startPage; i <= endPage; i++) {
            var button = $("<a>").text(i).click(function () {
                $("#page").val($(this).text()); // Set #page value
                updateTable();
            });
            button.css({
                "display": "inline-flex",
                "align-items": "center",
                "justify-content": "center"
            });
            // Highlight the current page button
            if (i === currentpage) {
                button.addClass("current-page");
            }

            pageButtonsContainer.append(button);
        }
    }
    $("#btnSEExp").click(function (e) {
        e.preventDefault();
        var terminalno = $("#terminalno").val();
        var fromdate = $("#fromdate").val();
        var todate = $("#todate").val();
        var acctnoto = $("#acctnoto").val();
        var transtype = $("#transtype").val();
        var status = $("#status").val();
        console.log(terminalno + ' ' + fromdate + ' ' + todate);
        var expParams = "xlsx" + '|' + $("#frDate").val() + '|' + $("#toDate").val()
            + '|' + "xlsx";
        var rptType = "xlsx";
        $.ajax({
            type: "GET",
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            url: '@Url.Action("Gateway_ExportExc", "Gateway")',
            data: {
                terminalno: terminalno,
                todate: todate,
                fromdate: fromdate,
                acctnoto: acctnoto,
                transtype: transtype,
                status: status
            },
            success: function (result) {
                $.ajax({
                    type: "GET",
                    dataType: "json",
                    contentType: 'application/json; charset=utf-8',
                    url: '@Url.Action("Gateway_ExportExc", "Gateway")',
                    data: {
                        terminalno: terminalno,
                        todate: todate,
                        fromdate: fromdate
                    },
                    success: function (result) {
                        if (result.success == 'S') {
                            var url = '@Url.Action("DownloadExportFile", "Gateway")'
                            window.location = '@Url.Action("DownloadExportFile", "Gateway")/?rpttype=' + rptType;
                        }
                        else { alert(result.errstr); }
                    },
                    error: function (err) {
                        alert('@ViewBag.ErrorMsg');
                    }
                });

            },
            error: function (err) {
                alert('@ViewBag.ErrorMsg');
            }
        });

    });



</script>
