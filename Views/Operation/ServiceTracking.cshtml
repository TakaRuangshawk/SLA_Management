@{
    ViewData["Title"] = "D1 Operation - Service Tracking";
    string[] tableHeaders = new string[]
    {
        "No",
        "Detail",
        "Application ",
        "IP ",
        "Date Time ",
        "STATUS "
    };
}  

<style>
    .chkbox {
        text-align: left;
    }

    .my-dropdown {
        width: 100%;
        height: 38px;
    }

    input:disabled {
        background-color: #f2f2f2;
    }

    .btnsearch {
        font-size: 18px;
    }

    select.form-control {
        -webkit-appearance: button;
    }

    input.form-control {
        -webkit-appearance: button;
        border-radius: 10px;
    }


    #header_search {
        top: 20px;
        position: relative;
        background-color: orange;
        border: solid;
        padding: 8px 40px 8px 40px;
        border-radius: 12px;
        font-weight: 700;
    }

    .item {
        padding: 0px;
    }

    #submit {
        position: relative;
        top: 50px;
        background: lightgray;
        border: 10px double white;
        border-radius: 20px;
        padding: 0px 10px 0px 10px;
    }

    #before-submit {
        display: flex;
        justify-content: center;
    }

    #main_search {
        margin-bottom: 50px;
        padding: 30px 0;
        margin-left: 50px;
        margin-right: 50px;
        border: 3px solid #888888;
        background-color: white;
        border-radius: 50px;
    }

    .dropdown-toggle {
        border-radius: 10px;
    }

    th {
        text-align: center;
    }
    td{
    padding : 0.5em!important;
    }
</style>

<div class="container w-auto containerHeader">
    <div class="row">
        <div class="col col-md-1">
        </div>
        <div class="col col-md-4">
            <a class="text-white fs-4" id="header_search">Service Tracking</a>
        </div>
    </div>

    <div id="main_search">
        @using (Html.BeginForm("ServiceTracking", "Operation", FormMethod.Get, new { id = "InsertFileCOMLogRecheckID" }))
    {
        <div class="row" style="margin-top: 45px;align-items:center; display: flex;justify-content: space-around;padding:0vw 3vw 0vw 3vw;white-space:nowrap;">

            <div class="col-md-1">
                <label>App Name : </label>
            </div>
            <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent; text-align:center;">
                @Html.DropDownList("appName", new SelectListItem[] {
            new SelectListItem(){ Text="Select App", Value = "" },
            new SelectListItem(){ Text="appChangeAndUnzip", Value = "appChangeAndUnzip" },
            new SelectListItem(){ Text="InsertFileCOMLog", Value = "InsertFileCOMLog" },
            new SelectListItem(){ Text="NDCT", Value = "NDCT" },
            new SelectListItem(){ Text="Downtime", Value = "Downtime" },
            new SelectListItem(){ Text="SLA Report", Value = "SLA Report" },
            new SelectListItem(){ Text="SLA Report (D1-GSB)", Value = "SLA Report (D1-GSB)" },
            }, new
            {
            @class = "my-dropdown",
            @name = "state"
            })
            </div>


            <div class="col-md-1">
                <label>From Date : </label>

            </div>

            <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                @Html.TextBox("frDate", ViewBag.CurrentFr as string, new { @class = "form-control subsearch",@type = "Date", @placeholder = "yyyy-mm-dd" })
            </div>

            <div class="col-md-1">
                <label>To Date : </label>
            </div>
            <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                @Html.TextBox("toDate", ViewBag.CurrentTo as string, new { @class = "form-control subsearch", @type = "Date", @placeholder = "yyyy-mm-dd" })
            </div>
        </div>


        <div class="row" style="margin-top: 45px;align-items:center; display: flex;justify-content: space-around;padding:0vw 3vw 0vw 3vw;white-space:nowrap;">
            <div class="col-md-1">
            </div>
            <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
            </div>
            <div class="col-md-1">
            </div>
            <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
            </div>
            <div class="col-md-1">
                <label>Rows : </label>
            </div>
            <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                <div class="form-group">
                    @Html.DropDownList("maxRows", new SelectListItem[] {
                    new SelectListItem(){ Text="50", Value = "50"  },
                    new SelectListItem(){ Text="100", Value = "100" },
                    new SelectListItem(){ Text="1000", Value = "500"  }
                }, new {@class = "form-control selectpicker subsearch" , @name = "state"})
                </div>
            </div>

        </div>



        <div class="row">

            <div class="col" id="before-submit">
                <div id="submit">

                    <button type="submit" data-toggle="modal" data-target="#WaitingModal" id="btnsearch" class="btn" style="padding:0px;">
                        <img src="~/images/icon_search.png" style="width: 50px; height: 50px" class="rounded-lg  p-0" alt="Search" />
                    </button>
                    <button type="submit" id="btnclear" data-toggle="modal" data-target="#WaitingModal" onclick="clearFunction()" class="btn" data-toggle="tooltip" name="cmdButton" title="ล้างข้อมูล" value="Clear" style="padding:0px;border: 0px; background-color: transparent;">
                        <img src="~/images/icon_refresh.png" style="width: 40px; height: 38px" class="rounded-lg p-0" alt="Clear Data" />
                    </button>

                </div>
            </div>
        </div>
    }
</div>

</div>
<div class="container">
<div class="table-responsive" style="overflow-x: hidden;">
    <table id="table-id" class="table table-striped custom-table" style="">
        <thead>
            <tr>
                @{
                    foreach (var head in tableHeaders)
                    {
                        <th scope="col"> @head </th>
                    }
                }

            </tr>
        </thead>

        <tbody>
            @{
                if (Model != null)
                {
                    @for (int i = 0; i < Model.Count; i++)
                    {
                        var Data = Model[i];
                        <tr>
                            <td style="text-align: center;vertical-align: middle;"> @(i + 1) </td>
                            <td style="text-align: center;vertical-align: middle;">
                                <a class="btn btn-light text-dark" id="btnEdit" data-toggle="modal" data-target="#myModal" onclick="EditButton('@Data.ID','@Data.APPNAME','@Data.USER_IP','@Data.UPDATE_DATE','@Data.STATUS','@Data.REMARK')" data-toggle="tooltip" name="cmdButton" title="ดูข้อมูล" value="View" style="cursor: pointer;border-radius: 40px; letter-spacing: 2px;">View</a>
                            </td>
                            <td style="text-align: center;vertical-align: middle;"> @Data.APPNAME </td>
                            <td style="text-align: right;vertical-align: middle;"> @Data.USER_IP </td>
                            <td style="text-align: center;vertical-align: middle;"> @Data.UPDATE_DATE </td>
                           
                            @{
                                if (Data.STATUS.ToLower() == "ok")
                                {
                                    <td style="text-align-last: center;">
                                        <img style="height:1.5rem;width:auto;" src="~/images/home_ok.png" />
                                    </td>
                                }
                                else if (Data.STATUS.ToLower() == "process" || Data.STATUS.ToLower() == "processing")
                                {
                                    <td style="text-align-last: center;">
                                        <img style="height:1.5rem;width:auto;" src="~/images/home_process.png" />
                                    </td>
                                }
                                else
                                {
                                    <td style="text-align-last: center;">
                                        <img style="height:1.5rem;width:auto;" src="~/images/home_error.png" />
                                    </td>
                                }

                            }
                        </tr>
                    }

                }
                if (Model.Count == 0)
                {

                <td colspan="12" style="text-align: center;"> NO DATA </td>
                }
            }
        </tbody>


    </table>
    </div>
    <div class="row">
        <div class="col-md-2" style="z-index:2;">
            <p style="font-size:16px;font-weight:bolder;">
                Select page :
                @Html.DropDownList("seletePageNow", new SelectListItem[] {

                }, new
                {
                @class = "form-control"
                })
            </p>
        </div>
        <div class="col colPagination" style="padding-top:10px;z-index:1;">

            <nav>
                <div class="pagination">
                    <li data-page="prev" id="back">
                        <a style="color: #868686;"> < </a>
                    </li>
                    <!--	Here the JS Function Will Add the Rows -->
                    <li data-page="next" id="prev">
                        <a style="color: #868686;"> > </a>
                    </li>

                </div>
            </nav>
        </div>
    </div>
    <div class="row">
    </div>

</div>


@using (Html.BeginForm("SlaTracking", "Operation", FormMethod.Get, new { id = "ModalTransactionID" }))
{
    <div class="modal fade" id="myModal" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="container-fluid" style="padding: 10px;">
                    <div class="row">
                        <div class="col-md-1">
                        </div>
                        <div class="col-md-2 modelTopic">
                            <label for="No">No </label>&nbsp;:&nbsp;
                        </div>
                        <div class="col-md-3 modelTextbox">
                            @Html.TextBox("ID", ViewBag.ID as string, new { @class = "w-100 form-control", @readonly = "true" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-1">
                        </div>
                        <div class="col-md-2 modelTopic">
                            <label for="AppName">AppName </label>&nbsp;:&nbsp;
                        </div>
                        <div class="col-md-3 modelTextbox">
                            @Html.TextBox("APPNAME", ViewBag.appName as string, new { @class = "w-100 form-control", @readonly = "true" })
                        </div>
                        <div class="col-md-2 modelTopic">
                            <label for="IP">IP </label>&nbsp;:&nbsp;
                        </div>
                        <div class="col-md-3 modelTextbox">
                            @Html.TextBox("USER_IP", ViewBag.userIP as string, new { @class = "w-100 form-control", @readonly = "true" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-1">
                        </div>
                        <div class="col-md-2 modelTopic">
                            <label for="UPDATE_DATE">Date Time </label>&nbsp;:&nbsp;
                        </div>
                        <div class="col-md-3 modelTextbox">
                            @Html.TextBox("UPDATE_DATE", ViewBag.UPDATE_DATE as string, new { @class = "w-100 form-control", @readonly = "true" })
                        </div>
                        <div class="col-md-2 modelTopic">
                            <label for="status">Status </label>&nbsp;:&nbsp;
                        </div>
                        <div class="col-md-3 modelTextbox">
                            @Html.TextBox("STATUS", ViewBag.status as string, new { @class = "w-100 form-control", @readonly = "true" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-1">
                        </div>
                        <div class="col-md-2 modelTopic">
                            <label for="Remark">Remark</label>&nbsp;:&nbsp;
                        </div>
                        <div class="col-md-8 modelTextbox">
                            @Html.TextArea("REMARK", ViewBag.remark as string, new { @class = "w-100 form-control h-100", @readonly = "true",@row = 3 })
                        </div>
                    </div>
                    <div class="row">
                        <div style="padding-top : 30px;"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}

<script>
    var maxRows = @ViewBag.maxRows;
    var md_Count = @Model.Count;
        getPagination('#table-id', maxRows);
        function getPagination(table, row) {
            var lastPage = 1;

            $('#maxRows')
                .on('change', function (evt) {
                    $('.paginationprev').html('')

                    lastPage = 1;
                    $('.pagination')
                        .find('li')
                        .slice(1, -1)
                        .remove();
                    var trnum = 0;
                    var maxRows = parseInt($(this).val());

                    if (maxRows == 5000) {
                        $('.pagination').hide();
                    } else {
                        $('.pagination').show();
                    }

                    var totalRows = $(table + ' tbody tr').length; // numbers of rows
                    $(table + ' tr:gt(0)').each(function () {
                        // each TR in  table and not the header
                        trnum++; // Start Counter
                        if (trnum > maxRows) {
                            // if tr number gt maxRows

                            $(this).hide(); // fade it out
                        }
                        if (trnum <= maxRows) {
                            $(this).show();
                        } // else fade in Important in case if it ..
                    }); //  was fade out to fade it in
                    if (totalRows > maxRows) {
                        // if tr total rows gt max rows option
                        var pagenum = Math.ceil(totalRows / maxRows); // ceil total(rows/maxrows) to get ..
                        //	numbers of pages

                        for (var i = 1; i <= pagenum;) {
                            // for each page append pagination li
                            $('.pagination #prev')
                                .before(
                                    '<li data-page="' +
                                    i +
                                    '">\
                                           <a style="color: #868686;">' +
                                    i++ +
                                    '\
                                                    </li>'
                                )
                                .show();
                        } // end for i
                        $('#back').show();



                    } else {
                        $('#back').hide();
                        $('#prev').hide();
                    }

                    // end if row count > max rows
                    $('.pagination [data-page="1"]').addClass('active'); // add active class to the first li
                    $('.pagination li').on('click', function (evt) {
                        // on click each page
                        evt.stopImmediatePropagation();
                        evt.preventDefault();
                        var pageNum = $(this).attr('data-page'); // get it's number

                        var maxRows = parseInt($('#maxRows').val()); // get Max Rows from select option



                        if (pageNum == 'prev') {
                            if (lastPage == 1) {
                                return;
                            }
                            pageNum = --lastPage;
                        }
                        if (maxRows < totalRows) {
                            if (pageNum == 'next') {
                                if (lastPage == $('.pagination li').length - 2) {
                                    return;
                                }
                                pageNum = ++lastPage;
                            }
                        }


                        lastPage = pageNum;
                        var trIndex = 0; // reset tr counter
                        $('.pagination li').removeClass('active'); // remove active class from all li
                        $('.pagination [data-page="' + lastPage + '"]').addClass('active'); // add active class to the clicked
                        // $(this).addClass('active');					// add active class to the clicked
                        limitPagging();
                        $(table + ' tr:gt(0)').each(function () {
                            // each tr in table not the header
                            trIndex++; // tr index counter
                            // if tr index gt maxRows*pageNum or lt maxRows*pageNum-maxRows fade if out
                            if (
                                trIndex > maxRows * pageNum ||
                                trIndex <= maxRows * pageNum - maxRows
                            ) {
                                $(this).hide();
                            } else {
                                $(this).show();
                            } //else fade in
                        }); // end of for each tr in table


                        $('#seletePageNow').val(lastPage);




                    }); // end of on click pagination list


                    $('#seletePageNow')
                        .find('option')
                        .remove()
                        .end();


                    var pagenum = Math.ceil(md_Count / parseInt($('#maxRows').val()));


                    var select = document.getElementById("seletePageNow");
                    for (var i = parseInt(pagenum); i > 0; i--) {
                        var option = document.createElement('option');
                        option.text = option.value = i;
                        select.add(option, 0);
                        console.log(option);
                    }

                    $('#seletePageNow').val(lastPage);

                })
                .val(row)
                .change();



            $('#seletePageNow')
                .on('change', function (evt) {
                    // on click each page
                    evt.stopImmediatePropagation();
                    evt.preventDefault();
                    var maxRows = parseInt($('#maxRows').val()); // get Max Rows from select option

                    var pageNum = $(this).val();

                    if (pageNum == null) pageNum = 1;





                    lastPage = pageNum;
                    var trIndex = 0; // reset tr counter
                    $('.pagination li').removeClass('active'); // remove active class from all li
                    $('.pagination [data-page="' + lastPage + '"]').addClass('active'); // add active class to the clicked
                    // $(this).addClass('active');					// add active class to the clicked
                    limitPagging();
                    $(table + ' tr:gt(0)').each(function () {
                        // each tr in table not the header
                        trIndex++; // tr index counter
                        // if tr index gt maxRows*pageNum or lt maxRows*pageNum-maxRows fade if out
                        if (
                            trIndex > maxRows * pageNum ||
                            trIndex <= maxRows * pageNum - maxRows
                        ) {
                            $(this).hide();
                        } else {
                            $(this).show();
                        } //else fade in
                    }); // end of for each tr in table
                }).change();



            // end of on select change

            // END OF PAGINATION
        }
        function limitPagging() {

                    if ($('.pagination li').length > 7) {
                        if ($('.pagination li.active').attr('data-page') <= 3) {
                            $('.pagination li:gt(5)').hide();
                            $('.pagination li:lt(5)').show();
                            $('.pagination [data-page="next"]').show();
                        } if ($('.pagination li.active').attr('data-page') > 3) {
                            $('.pagination li:gt(0)').hide();
                            $('.pagination [data-page="next"]').show();
                            for (let i = (parseInt($('.pagination li.active').attr('data-page')) - 2); i <= (parseInt($('.pagination li.active').attr('data-page')) + 2); i++) {
                                $('.pagination [data-page="' + i + '"]').show();

                            }

                        }
                    }
        }
        function EditButton(ID, APPNAME, USER_IP, UPDATE_DATE, STATUS, REMARK) {
            document.getElementById('ID').value = ID;
            document.getElementById('APPNAME').value = APPNAME;
            document.getElementById('USER_IP').value = USER_IP;
            document.getElementById('UPDATE_DATE').value = UPDATE_DATE;
            document.getElementById('STATUS').value = STATUS;
            document.getElementById('Remark').value = Remark;
        }
    updatedate();
    function updatedate() {
        var frDate = document.getElementById("frDate").value;
        var toDate = document.getElementById("toDate").value;
        document.getElementById("toDate").setAttribute("min",frDate);
        var chk_frdate = new Date(frDate);
        var chk_todate = new Date(toDate);
        if(toDate<frDate){
            document.getElementById("toDate").value = frDate;
        }
    }
</script>