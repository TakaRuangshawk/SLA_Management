@model PagedList.IPagedList<SLA_Management.Models.TermProbModel.ej_trandeviceprob>
@{
    ViewData["Title"] = "Problem Monitor";
    string[] tableHeaders = new string[]
                                                                                                    {

    "Date",
    "Time",
    "Serial No.",
    "Terminal ID ",
    "Terminal Name ",
    "Event Name ",
    "Event Desciption",

                                                                                                            };

    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Table #6</title>
</head>



<style>

    .bootstrap-select:not([class*="col-"]):not([class*="form-control"]):not(.input-group-btn) {
    width: 526px;
    margin-left: -2px;
    }

    .bootstrap-select > .dropdown-toggle {
    border-color: #ced4da;
    background-color: transparent;
    position: relative;
    width: 100%;
    text-align: right;
    white-space: nowrap;
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
    -webkit-box-align: center;
    -webkit-align-items: center;
    -ms-flex-align: center;
    align-items: center;
    -webkit-box-pack: justify;
    -webkit-justify-content: space-between;
    -ms-flex-pack: justify;
    justify-content: space-between;
    }

    select.form-control {
    -webkit-appearance: button;
    }


    #header_search {
    top: 20px;
    position: relative;
    background-color: orange;
    border: solid;
    padding: 8px 40px 8px 40px;
    border-radius: 12px;
    font-weight: 700;
    }

    .item {
    padding: 0px;
    }

    #submit {
    position: relative;
    top: 50px;
    background: lightgray;
    border: 10px double white;
    border-radius: 20px;
    padding: 0px 10px 0px 10px;
    }

    #before-submit {
    display: flex;
    justify-content: center;
    }

    #main_search {
    margin-bottom: 50px;
    padding: 30px 3vw 30px 3vw;
    margin-left: 50px;
    margin-right: 50px;
    border: 3px solid #888888;
    background-color: white;
    border-radius: 50px;
    }

    .dropdown-toggle {
    border-radius: 10px;
    }

    .show-tick {
    width: -webkit-fill-available !important;
    }

    th {
    text-align: center;
    }

    .boxDownload {
    /*  background-color: rgba(255, 255, 255, 0.5);
    position: fixed;
    top: 250px;
    right: 550px;
    pointer-events: none;
    z-index: 10; */
    background-color: rgba(255, 255, 255, 0.5);
    position: fixed;
    top: 0px;
    right: 0px;
    bottom: 0px;
    left: 0px;
    pointer-events: none;
    z-index: 10;
    }

    .imgDownload {
    position: sticky;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    }

</style>



<div class="content contentHeader">
    <div class="container w-auto containerHeader" style="padding-bottom: 0px;">
        <div class="row">
            <div class="col col-md-1">
            </div>
            <div class="col col-md-4">
                <a class="text-white fs-4" id="header_search">Problem Monitor</a>
            </div>
        </div>


        <div id="main_search">
            @using (Html.BeginForm("EJAddTranProbTermAction", "EJAddTranProbTerm", FormMethod.Get, new { id = "EJAddTranProbTermRecheckDate" }))
            {
                <div class="row" style="margin-top: 45px;align-items:center;    display: flex;padding:0vw 3vw 0vw 3vw;white-space:nowrap;">
                    <div class="col-2" style="">
                        <h>Bank : </h>
                    </div>
                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        <div class="form-group">
                            <!--		Show Numbers Of Rows 		-->
                            @Html.DropDownList("bankName", new SelectListItem[] {
                        new SelectListItem(){ Text="--", Value = ""  },
                        new SelectListItem(){ Text="BAAC", Value = "BAAC"  },
                        new SelectListItem(){ Text="ICBC", Value = "ICBC" }

                                                        }, new
                                                        {
                                                            @class = "form-control dropdown"
                                              ,
                                                            @style = " border-radius: 10px;",
                                                            @name = "state",
                                            @id = "bankNameDropdown"
                                                            // @onchange = "submitForm()"

                                                        })

                        </div>
                    </div>
                    <div class="col-md-1">
                        <button type="submit" data-toggle="modal" data-target="#WaitingModal" id="btnsearch" class="btn" style="padding:0px;">
                            <img src="~/images/icon_search.png" style="width: 50px; height: 50px" class="rounded-lg  p-0" alt="Search" />
                        </button>
                    </div>

                </div>
                <div class="row" style="margin-top: 45px;align-items:center;    display: flex;justify-content: space-between;padding:0vw 3vw 0vw 3vw;white-space:nowrap;">

                    <div class="col-2" style="">
                        <h>Terminal : </h>
                    </div>
                    @* <div class="col-md-2" style="margin-left:30px">
                @Html.TextBox("TermID", ViewBag.CurrentTID as string, new { @class = "form-control subsearch" , @placeholder = "Terminal ID" })
                </div>*@
                    @*<div class="item col-2" style="border-color:#ced4da; background-color: transparent;">
                <select class="form-control subsearch selectpicker" id="TermID" name="TermID" data-live-search="true">
                <option data-tokens="" value="">--</option>
                @foreach (string item in ViewBag.CurrentTID)
                {
                if (@item != @ViewBag.TermID)

                {
                <option data-tokens=@item>@item</option>
                }
                else
                {
                <option data-tokens=@item selected>@item</option>

                }


                }
                </select>
                </div>*@
                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        <select class="selectpicker form-control subsearch" id="TermID" name="TermID" data-live-search="true">
                            <option data-tokens="" value="">--</option>
                            @foreach (var item in ViewBag.CurrentTID)
                            {
                                if (@item.TERM_ID != @ViewBag.TermID)
                                {
                                    <option value=@item.TERM_ID data-tokens=@item.TERM_ID>@item.TERM_SEQ : @item.TERM_ID : @item.TERM_NAME</option>
                                }
                                else
                                {
                                    <option value=@item.TERM_ID data-tokens=@item.TERM_ID selected>@item.TERM_SEQ : @item.TERM_ID : @item.TERM_NAME</option>

                                }
                            }
                        </select>
                    </div>
                    <div class="col-2" style="">
                        <h>From Date : </h>
                    </div>
                    <div class="col-2 " style="padding:0; ">
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                            @Html.TextBox("FrDate", ViewBag.CurrentFr as string, new { @style = " border-radius: 10px;", @class = "form-control subsearch", @placeholder = "dd/mm/yyyy", @type = "date", @min = "1997-01-01", @max = "2030-12-31", @onfocus = "(this.type='date')" })
                        </div>
                    </div>
                    <div class="col-2" style="">
                        <h>To Date : </h>
                    </div>
                    <div class="col-2" style="padding:0;">
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                            @Html.TextBox("ToDate", ViewBag.CurrentTo as string, new { @style = " border-radius: 10px;", @class = "form-control subsearch", @placeholder = "dd/mm/yyyy", @type = "date", @min = "01-01-1997", @max = "31-12-2030", @pattern = "dd/mm/yyyy" })
                        </div>
                    </div>
                </div>
                @* <div class="row" style="margin-top: 15px;align-items:center;">
            <div class="col col-lg-1">
            </div>
            <div class="col col-lg-2" style="width: auto">
            <h>From Time : </h>
            </div>
            <div class="col-md-2" style="margin-left:32px;">
            <div class="input-group">
            <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
            @Html.TextBox("FrTime", ViewBag.CurrentFrTime as string, new { @style = " border-radius: 10px;" , @class = "form-control w-75 rounded-lg", @placeholder = "00:00:00" })
            </div>
            </div>
            <div class="col col-lg-2" style="width: auto;margin-left: 11px">
            <h>To Time : </h>
            </div>
            <div class="col-md-2" style="margin-left:48px;">
            <div class="input-group">
            <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
            @Html.TextBox("ToTime", ViewBag.CurrentToTime as string, new { @style = " border-radius: 10px;" , @class = "form-control w-75 rounded-lg", @placeholder = "23:59:59" })
            </div>
            </div>
            </div>*@
                <div class="row " style="margin-top: 45px;align-items:center;    display: flex;justify-content: space-between;padding:0vw 3vw 0vw 3vw;white-space:nowrap;">

                    <div class="col-2" style="">
                        <label for="ErrMeaaage">Error Message:</label>
                    </div>
                    <div class="col-2" style="padding: 0px;">
                        <select name="ddlProbMaster" id="ddlProbMaster" style="" class="selectpicker" multiple>
                            @{

                                if (ViewBag.ProbMaster != "" && ViewBag.ProbMaster != null)
                                {
                                    char[] spMas = new char[] { '|' };
                                    string strMasterProb = ViewBag.ProbMaster;
                                    string[] arrMasterProb = strMasterProb.Split(spMas);
                                    char[] spMas1 = new char[] { '$' };
                                    foreach (string mas in arrMasterProb)
                                    {

                                        string[] arrMasterProb1 = mas.Split(spMas1);
                                        string currentProbMaster = ViewBag.CurrentProbMaster;


                                        if (!string.IsNullOrEmpty(currentProbMaster))
                                        {
                                            string[] currentProbMasterSpilt = currentProbMaster.Split(',');
                                            var flag = false;
                                            foreach (string temp in currentProbMasterSpilt)
                                            {
                                                if (temp == arrMasterProb1[0].ToString())
                                                {
                                                    <option selected="selected" value="@(arrMasterProb1[0].ToString())">@(arrMasterProb1[1].ToString())</option>
                                                    flag = true;
                                                }


                                            }
                                            if (flag == false)
                                            {
                                                <option value="@(arrMasterProb1[0].ToString())">@(arrMasterProb1[1].ToString())</option>
                                            }
                                        }
                                        else
                                        {
                                            if (mas == arrMasterProb1[0].ToString())
                                            {
                                                <option selected="selected" value="@(arrMasterProb1[0].ToString())">@(arrMasterProb1[1].ToString())</option>
                                                break;
                                            }
                                            else
                                            {
                                                <option value="@(arrMasterProb1[0].ToString())">@(arrMasterProb1[1].ToString())</option>
                                            }
                                        }

                                    }
                                }
                            }
                        </select>
                    </div>
                    @Html.Hidden("KeyWordList", ViewBag.KeyWordList as string)
                    <div class="col-2" style="">
                        <h>TerminalType : </h>
                    </div>

                    <div class="col-2" style="padding:0px;">
                        <div class="form-group">
                            <!--		Show Numbers Of Rows 		-->
                            @Html.DropDownList("terminalType", ViewBag.probTermStr as SelectList, "--", new { @class = "form-control" })
                            @* @Html.DropDownList("terminalType", new SelectListItem[] {
                        new SelectListItem(){ Text="ALL", Value = "G165;G262" },
                        new SelectListItem(){ Text="ATM", Value = "G165"  },
                        new SelectListItem(){ Text="ADM", Value = "G262"  }

                        }, new
                        {
                        @class = "form-control dropdown"
                        ,
                        @style = " border-radius: 10px;" ,
                        @name = "state"

                        })*@

                        </div>
                    </div>
                    @* <div class="col col-lg-2">
                <label for="MessageErr1">Error Meaasge</label>&nbsp;<br />
                <label for="MessageErr2">(Key Word)</label>&nbsp;:&nbsp;&nbsp;
                </div>
                <div class="col-md-2">
                @Html.TextBox("MessErrKeyWord", ViewBag.CurrentMessErrKeyWord as string, new { @class = "w-100 form-control" })
                </div>*@

                    <div class="col-2" style="">
                        <h>Rows : </h>
                    </div>

                    <div class="col-2" style="padding:0px;">
                        <div class="form-group">
                            <!--		Show Numbers Of Rows 		-->
                            @Html.DropDownList("maxRows", new SelectListItem[] {
                        new SelectListItem(){ Text="50", Value = "50" },
                        new SelectListItem(){ Text="100", Value = "100"  },
                        new SelectListItem(){ Text="500", Value = "500"  },
                        new SelectListItem(){ Text="1000", Value = "1000"  }
                                                        }, new
                                                        {
                                                            @class = "form-control dropdown"
                                              ,
                                                            @style = " border-radius: 10px;",
                                                            @name = "state"

                                                        })

                        </div>
                    </div>
                </div>
                @*  <div class="row" style="margin-top: 15px;align-items:center;">

            <div class="col col-lg-1">
            </div>


            </div>*@

                <div class="row">

                    <div class="col" id="before-submit">
                        <div id="submit">
                            <button type="submit" id="btnsearch2" title="ค้นหาข้อมูล" class="btn" style="padding:0px;">
                                <img src="~/images/icon_search.png" style="width: 50px; height: 50px" class="rounded-lg  p-0" alt="Search" />
                            </button>

                            <button type="submit" id="btnclear" class="btn" data-toggle="tooltip" name="cmdButton" title="ล้างข้อมูล" value="Clear" style="padding:0px;border: 0px; background-color: transparent;">
                                <img src="~/images/icon_refresh.png" style="width: 40px; height: 38px" class="rounded-lg p-0" alt="Clear Data" />
                            </button>


                            <a id="btnSEExp" data-toggle="tooltip" title="Excel Export Report" style="cursor: pointer; padding:0px;">
                                <img src="~/images/icon_excel.png" style="width: 50px; height: 50px" class="rounded-lg  p-0" alt="Excel Export Report" />
                            </a>

                            @if (Context.Session.GetString("Role") != "User")
                            {
                                <button type="button" id="btnInsertProb" class="btn" name="InsertProbButton" title="Insert Problem Master" data-toggle="modal" data-target="#InsertProbModal" style="padding:0px;border: 0px; background-color: transparent;">
                                    <img src="~/images/icon_add.png" style="width: 144px; height: 40px" class="rounded-lg p-0" alt="Upload Comlog" />
                                </button>
                            }

                        </div>
                    </div>
                </div>

            }

        </div>


    </div>
    <div class="container-fluid">
        <div class="row" style="background-color: #f8d5ad;width: fit-content;padding: 8px;margin-left: 3px;border-radius: 15px;font-size: 22px;font-weight: bold;margin-bottom: 15px; border:1px solid lightgrey;">

            <div class="col" style="display: flex;justify-content: center;">
                <a style="white-space:nowrap;align-items: center;display: flex;">Total Record:</a>
            </div>
            <div class="col" style="display: flex;justify-content: center;">
                <a style="white-space:nowrap;display: flex;align-items: center;background-color: rgba(255,255,255,1);padding: 10px 35px 10px 35px;border-radius: 10px;" ;="">@ViewBag.Records</a>
            </div>
        </div>
        <div class="table-responsive" style="overflow-x: hidden;">
            <table id="table-id" class="table table-striped custom-table">
                <thead>
                    <tr>
                        @{
                            foreach (var head in tableHeaders)
                            {
                                <th scope="col" style="text-align:center"> @head </th>
                            }
                        }

                    </tr>
                </thead>

                <tbody>
                    @{
                        if (Model != null)
                        {
                            foreach (var Data in Model)
                            {
                                <tr>

                                    <td> @Data.TransactionDate.Date.ToString("yyyy-MM-dd")</td>
                                    <td> @Data.TransactionDate.TimeOfDay</td>
                                    <td style="text-align:center;"> @Data.Seqno </td>
                                    <td style="text-align:center;"> @Data.TerminalID</td>
                                    <td style="text-align:center;"> @Data.BranchName </td>
                                    <td style="text-align:center;"> @Data.Memo </td>
                                    <td style="text-align:left;"> @Data.Remark.Substring(0, Math.Min(@Data.Remark.Length, 100)); </td>
                                </tr>
                            }

                        }
                        if (Model.Count == 0)
                        {

                        <td colspan="8" style="text-align: center;"> NO DATA </td>
                        }
                    }
                </tbody>


            </table>


            <div class="row">
                <div class="col colPagination" style="padding-top:10px;z-index:1;">

                    <nav>
                        <div class="pagination">
                            <li data-page="prev" id="back" style="background-color:transparent;">

                                <img style="height:40px;width:auto;margin-right:10px;" src="~/images/arrow.png" />
                            </li>
                            <!--	Here the JS Function Will Add the Rows -->
                            <li data-page="next" id="prev" style="background-color:transparent;">
                                <img style="height:40px;width:auto;margin-left:10px;transform:scaleX(-1)" src="~/images/arrow.png" />
                            </li>

                        </div>
                    </nav>
                </div>
                <div class="col-md-2" style="z-index:2;">
                    <p style="font-size:16px;font-weight:bolder;">
                        Select page :
                        @Html.DropDownList("seletePageNow", new SelectListItem[] {

                                        }, new
                                        {
                                            @class = "form-control"
                                        })
                    </p>
                </div>
            </div>

        </div>

    </div>

</div>


<div class="modal fade" id="InsertProbModal" tabindex="-1" role="dialog" aria-labelledby="InsertProbModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#FFA500;">
                <h5 class="modal-title" id="exampleModalLabel" style="color:white;">Add Message</h5>

            </div>

            @*<form>
            <div class="form-group">
            <label for="recipient-name" class="col-form-label">Recipient:</label>
            <input type="text" class="form-control" id="recipient-name">
            </div>
            <div class="form-group">
            <label for="message-text" class="col-form-label">Message:</label>
            <textarea class="form-control" id="message-text"></textarea>
            </div>
            </form>*@


            <form action="InsertProbMaster" enctype="multipart/form-data" method="get" onsubmit="AJAXSubmit(this);return false;">
                <div class="modal-body">
                    <div class="row" style="margin-top: 15px;align-items:center; display: flex;justify-content: space-evenly;">
                        <div class="col-2 col-lg-2 text-nowrap" style="">
                            <h>Username : </h>
                        </div>
                        <div class="col-6 col-md-6" style="">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                @Html.TextBox("username", ViewBag.username as string, new { @style = " border-radius: 10px;", @class = "form-control subsearch", @placeholder = "username" })
                            </div>
                        </div>
                    </div>
                    <div class="row" style="margin-top: 15px;align-items:center; display: flex;justify-content: space-evenly;">

                        <div class="col-2 col-lg-2 text-nowrap" style="">
                            <h>Email : </h>
                        </div>
                        <div class="col-6 col-md-6" style="">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                @Html.TextBox("email", ViewBag.email as string, new { @style = " border-radius: 10px;", @class = "form-control subsearch", @placeholder = "email" })
                            </div>
                        </div>
                    </div>
                    <div class="row" style="margin-top: 15px;align-items:center; display: flex;justify-content: space-evenly;">

                        <div class="col-2 col-lg-2 text-nowrap" style="">
                            <h>ProblemCode : </h>
                        </div>
                        <div class="col-6 col-md-6" style="">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                @Html.TextBox("probCodeStr", ViewBag.probCodeStr as string, new { @style = " border-radius: 10px;", @class = "form-control subsearch", @placeholder = "problemcode" })
                            </div>
                        </div>
                    </div>

                    <div class="row" style="margin-top: 15px;align-items:center;display: flex;justify-content: space-evenly;">
                        <div class="col-2 col-lg-2 text-nowrap" style="">
                            <h>ErrorMessage : </h>
                        </div>
                        <div class="col-6 col-md-6" style="">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                @Html.TextBox("probNameStr", ViewBag.probNameStr as string, new { @style = " border-radius: 10px;", @class = "form-control subsearch", @placeholder = "error message" })
                            </div>
                        </div>
                    </div>

                    <div class="row" style="margin-top: 15px;align-items:center; display: flex;justify-content: space-evenly;">
                        <div class="col-2 col-lg-2 text-nowrap" style="">
                            <h>ProblemType : </h>
                        </div>
                        <div class="col-6 col-md-6" style="">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                @Html.DropDownList("probTypeStr", ViewBag.probTypeStr as SelectList, "--", new { @class = "form-control" })
                                @*@Html.TextBox("probTypeStr", ViewBag.probTypeStr as string, new { @class = "form-control subsearch", @placeholder = "probType"})*@
                                @*  <select class="selectpicker form-control subsearch" id="probTypeStr" name="probTypeStr" data-live-search="true">
                                    <option data-tokens="" value="">--</option>
                                    @foreach (var item in ViewBag.probTypeStr)
                                    {
                                        <option value=@item>@item </option>
                                    }
                                </select>*@
                            </div>
                        </div>
                    </div>

                    <div class="row" style="margin-top: 15px;align-items:center; display: flex;justify-content: space-evenly;">
                        <div class="col-2 col-lg-2 text-nowrap" style="">
                            <h>TerminalType : </h>
                        </div>
                        <div class="col-6 col-md-6" style="">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                @Html.DropDownList("probTermStr", ViewBag.probTermStr as SelectList, "--", new { @class = "form-control" })

                                @* <select class="selectpicker form-control subsearch" id="probTermStr" name="probTermStr" data-live-search="true">
                                    <option data-tokens="" value="G165;G262">ALL</option>
                                    @foreach (var item in ViewBag.probTermStr)
                                    {                                        
                                        <option value=@item>@item </option>

                                    }
                                </select>*@
                                @*@Html.TextBox("probTermStr", ViewBag.probTermStr as string, new { @class = "form-control subsearch", @placeholder = "probTerm"})*@
                                @*  @Html.DropDownList("probTermStr", new SelectListItem[] {
                                new SelectListItem(){ Text="ALL", Value = "G165;G262" },
                                new SelectListItem(){ Text="ATM", Value = "G165"  },
                                new SelectListItem(){ Text="ADM", Value = "G262"  }

                                }, new
                                {
                                @class = "form-control dropdown"
                                ,
                                @style = " border-radius: 10px;" ,
                                @name = "state"

                                })*@
                            </div>
                        </div>
                    </div>

                    <div class="row" style="margin-top: 15px;align-items:center; display: flex;justify-content: space-evenly;">
                        <div class="col-2 col-lg-2 text-nowrap" style="">
                            <h>DisplayFlag : </h>
                        </div>
                        <div class="col-6 col-md-6" style="">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                @*@Html.TextBox("probTermStr", ViewBag.probTermStr as string, new { @class = "form-control subsearch", @placeholder = "probTerm"})*@
                                @Html.DropDownList("displayflagStr", new SelectListItem[] {
                                new SelectListItem(){ Text = "1",Value = "1" },
                                new SelectListItem(){ Text = "0",Value = "0" }
                                                        }, new
                                                        {
                                                            @class = "form-control dropdown"
                                         ,
                                                            @style = " border-radius: 10px;",
                                                            @name = "state"

                                                        })
                            </div>
                        </div>
                    </div>

                    <div class="row" style="margin-top: 15px;align-items:center;display: flex;justify-content: space-evenly;">
                        <div class="col-2 col-lg-2 text-nowrap" style="">
                            <h>Memo : </h>
                        </div>
                        <div class="col-6 col-md-6" style="">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                @Html.TextArea("memo", ViewBag.memoStr as string, new { @style = " border-radius: 10px; height: 100px;", @class = "form-control subsearch", @placeholder = "memo message" })
                            </div>
                        </div>
                    </div>

                    <div class="row" style="margin-top: 15px;align-items:center;display: flex;justify-content: space-evenly;">
                        <div class="col-2 col-lg-2 text-nowrap" style="">
                            <h>Start Rerun : </h>
                        </div>
                        <div class="col-6 col-md-6" style="">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                @Html.TextBox("startDate", ViewBag.startDate as string, new { @style = " border-radius: 10px;", @class = "form-control subsearch", @placeholder = "dd/mm/yyyy", @type = "date", @min = "1997-01-01", @max = "2030-12-31", @onfocus = "(this.type='date')" })
                            </div>
                        </div>
                    </div>





                    <div style="margin-top:15px;">
                        <output name="result"></output>
                    </div>

                </div>
                <div class="modal-footer" style="background-color:#FFA500;">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="clearInsertDataProb()">Close</button>
                    <button type="button" id="btnInsertProbMasterMain" class="btn btn-primary">Confirm</button>
                </div>


            </form>


        </div>
    </div>
</div>

<div class="boxDownload" id="boxDownload" style="display: none;">
    <img class="imgDownload" src="~/images/loading.gif">
</div>


<script>
    async function AJAXSubmit(oFormElement) {

        var resultElement = oFormElement.elements.namedItem("result");
        const formData = new FormData(oFormElement);
        try {
            const response = await fetch(oFormElement.action, {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                var res = response.json();

                res.then((data) => {

                    resultElement.value = 'Result succeed : result is ' + data.result + ';
                    resultElement.style.color = 'LightGreen';
                });

            }

        } catch (error) {
            resultElement.value = 'Result error : ' + error;
            resultElement.style.color = 'red';
        }
    }

</script>


<script>



         $("#btnsearch").click(function (e) {
         e.preventDefault();

             $("#boxDownload").show();

           

             setTimeout(function () {
                 $("#EJAddTranProbTermRecheckDate").submit();
             }, 100); // Use 0 milliseconds for minimal delay

         });

          $("#btnsearch2").click(function (e) {
         e.preventDefault();

             $("#boxDownload").show();



             setTimeout(function () {
                 $("#EJAddTranProbTermRecheckDate").submit();
             }, 100); // Use 0 milliseconds for minimal delay

         });


     $("#btnclear").click(function (e) {
         e.preventDefault();

             $("#boxDownload").show();


             setTimeout(function () {
                 $("#EJAddTranProbTermRecheckDate").submit();
             }, 100); // Use 0 milliseconds for minimal delay

         });


     function delay(ms) {
         return new Promise(resolve => setTimeout(resolve, ms));
     }


     $("#EJAddTranProbTermRecheckDate").submit(async function (e) {
         e.preventDefault();

          $("#boxDownload").show();
          var bankname = $("#bankNameDropdown").val();

                 if (!bankname) {
        alert("Please select a bank.");
         $("#boxDownload").hide();
        return; // หยุดการทำงานของฟังก์ชันนี้
    }


         var FrDateTemp = new Date($('#FrDate').val());
         var ToDateTemp = new Date($('#ToDate').val());



         if (Date.parse($('#FrDate').val()) > Date.parse($('#ToDate').val())) {
             alert("'From date'( " + FrDateTemp.toISOString().split('T')[0] + " ) should be less than 'To date' ( " + ToDateTemp.toISOString().split('T')[0] + " ) . Please check again!");
             $("#boxDownload").hide();

         } else {

             this.submit();
         }

     });

     getPagination('#table-id', @ViewBag.maxRows);


     function getPagination(table, row) {
         var lastPage = 1;

         $('#maxRows')
             .on('change', function (evt) {
                 $('.paginationprev').html('');

                 lastPage = 1;
                 $('.pagination')
                     .find('li')
                     .slice(1, -1)
                     .remove();
                 var trnum = 0;
                 var maxRows = parseInt($(this).val());

                 if (maxRows == 5000) {
                     $('.pagination').hide();
                 } else {
                     $('.pagination').show();
                 }

                 var totalRows = $(table + ' tbody tr').length; // numbers of rows
                 $(table + ' tr:gt(0)').each(function () {
                     // each TR in  table and not the header
                     trnum++; // Start Counter
                     if (trnum > maxRows) {
                         // if tr number gt maxRows

                         $(this).hide(); // fade it out
                     }
                     if (trnum <= maxRows) {
                         $(this).show();
                     } // else fade in Important in case if it ..
                 }); //  was fade out to fade it in
                 if (totalRows > maxRows) {
                     // if tr total rows gt max rows option
                     var pagenum = Math.ceil(totalRows / maxRows); // ceil total(rows/maxrows) to get ..
                     //	numbers of pages

                     for (var i = 1; i <= pagenum;) {
                         // for each page append pagination li
                         $('.pagination #prev')
                             .before(
                                 '<li data-page="' +
                                 i +
                                 '">\
                                                                            <a style="color: #333333;">' +
                                 i++ +
                                 '\
                                                                                     </li>'
                             )
                             .show();
                     } // end for i
                     $('#back').show();



                 } else {
                     $('#back').hide();
                     $('#prev').hide();
                 }

                 // end if row count > max rows
                 $('.pagination [data-page="1"]').addClass('active'); // add active class to the first li
                 $('.pagination li').on('click', function (evt) {
                     // on click each page
                     evt.stopImmediatePropagation();
                     evt.preventDefault();
                     var pageNum = $(this).attr('data-page'); // get it's number

                     var maxRows = parseInt($('#maxRows').val()); // get Max Rows from select option



                     if (pageNum == 'prev') {
                         if (lastPage == 1) {
                             return;
                         }
                         pageNum = --lastPage;
                     }
                     if (maxRows < totalRows) {
                         if (pageNum == 'next') {
                             if (lastPage == $('.pagination li').length - 2) {
                                 return;
                             }
                             pageNum = ++lastPage;
                         }
                     }


                     lastPage = pageNum;
                     var trIndex = 0; // reset tr counter
                     $('.pagination li').removeClass('active'); // remove active class from all li
                     $('.pagination [data-page="' + lastPage + '"]').addClass('active'); // add active class to the clicked
                     // $(this).addClass('active');					// add active class to the clicked
                     limitPagging();
                     $(table + ' tr:gt(0)').each(function () {
                         // each tr in table not the header
                         trIndex++; // tr index counter
                         // if tr index gt maxRows*pageNum or lt maxRows*pageNum-maxRows fade if out
                         if (
                             trIndex > maxRows * pageNum ||
                             trIndex <= maxRows * pageNum - maxRows
                         ) {
                             $(this).hide();
                         } else {
                             $(this).show();
                         } //else fade in
                     }); // end of for each tr in table


                     $('#seletePageNow').val(lastPage);




                 }); // end of on click pagination list

                 limitPagging();
    @*Set value in seletePage box*@
                     $('#seletePageNow')
                         .find('option')
                         .remove()
                         .end();


                 var pagenum = Math.ceil(@Model.Count / parseInt($('#maxRows').val()));


                                                                   var select = document.getElementById("seletePageNow");
                 for (var i = parseInt(pagenum); i > 0; i--) {
                     var option = document.createElement('option');
                     option.text = option.value = i;
                     select.add(option, 0);
                 }

                 $('#seletePageNow').val(lastPage);

             })
             .val(row)
             .change();



         $('#seletePageNow')
             .on('change', function (evt) {
                 // on click each page
                 evt.stopImmediatePropagation();
                 evt.preventDefault();
                 var maxRows = parseInt($('#maxRows').val()); // get Max Rows from select option

                 var pageNum = $(this).val();

                 if (pageNum == null) pageNum = 1;





                 lastPage = pageNum;
                 var trIndex = 0; // reset tr counter
                 $('.pagination li').removeClass('active'); // remove active class from all li
                 $('.pagination [data-page="' + lastPage + '"]').addClass('active'); // add active class to the clicked
                 // $(this).addClass('active');					// add active class to the clicked
                 limitPagging();
                 $(table + ' tr:gt(0)').each(function () {
                     // each tr in table not the header
                     trIndex++; // tr index counter
                     // if tr index gt maxRows*pageNum or lt maxRows*pageNum-maxRows fade if out
                     if (
                         trIndex > maxRows * pageNum ||
                         trIndex <= maxRows * pageNum - maxRows
                     ) {
                         $(this).hide();
                     } else {
                         $(this).show();
                     } //else fade in
                 }); // end of for each tr in table
             }).change();



         // end of on select change
          document.getElementById("boxDownload").style.display = "none";
         // END OF PAGINATION
     }


     function limitPagging() {
         // alert($('.pagination li').length)

         if ($('.pagination li').length > 7) {
             if ($('.pagination li.active').attr('data-page') <= 3) {
                 $('.pagination li:gt(5)').hide();
                 $('.pagination li:lt(5)').show();
                 $('.pagination [data-page="next"]').show();
             } if ($('.pagination li.active').attr('data-page') > 3) {
                 $('.pagination li:gt(0)').hide();
                 $('.pagination [data-page="next"]').show();
                 for (let i = (parseInt($('.pagination li.active').attr('data-page')) - 2); i <= (parseInt($('.pagination li.active').attr('data-page')) + 2); i++) {
                     $('.pagination [data-page="' + i + '"]').show();

                 }

             }
         }
     }



     $(function () {
         // Just to append id number for each row
         $('table tr:eq(0)').prepend('<th> No </th>');

         var id = 0;
         var count = @Model.Count;

         $('table tr:gt(0)').each(function () {
             id++;
             if (count != 0) {
                 $(this).prepend('<td style="text-align:center;">' + id + '</td>');
             }

         });
     });

     //  Developed By Yasser Mas
     // yasser.mas2@gmail.com


     $("#btnSEExp").click(function (e) {
         e.preventDefault();

          $("#boxDownload").show();

         var expParams = "xlsx" + '|' + $("#frDate").val() + '|' + $("#toDate").val()
             + '|' + "xlsx";
         var rptType = "xlsx";
         $.ajax({
             type: "POST",
             dataType: "json",
             data: '{ "exparams" : "' + expParams + '" }',
             contentType: 'application/json; charset=utf-8',
             url: '@Url.Action("EJAddTermProb_ExportExc", "EJAddTranProbTerm")',
             success: function (result) {
                 if (result.success == 'S') {
                     var url = '@Url.Action("DownloadExportFile", "EJAddTranProbTerm")'
                     window.location = '@Url.Action("DownloadExportFile", "EJAddTranProbTerm")/?rpttype=' + rptType;
                 }
                 else { alert(result.errstr); }
             },
             error: function (err) {
                 alert('@ViewBag.ErrorMsg');
             }
         });
         setTimeout(function() {
        $("#boxDownload").hide();
    }, 1000);
     });

     $("#btnInsertProbMasterMain").click(function (e) {
         e.preventDefault();
         var value = $("#probNameStr").val();
         var encodedString = encodeURIComponent(value);

         $.ajax({
             type: "POST",
             dataType: "json",
             contentType: 'application/json; charset=utf-8',
             url: '@Url.Action("InsertProbMaster", "EJAddTranProbTerm")?username=' + $("#username").val() + '&email=' + $("#email").val() + '&probCodeStr=' + $("#probCodeStr").val() + '&probNameStr=' + encodedString + '&probTypeStr=' + $("#probTypeStr").val() + '&probTermStr=' + $("#probTermStr").val() + '&displayflagStr=' + $("#displayflagStr").val() + '&memo=' + $("#memo").val() + '&startDate=' + $("#startDate").val(),
             success: function (result) {
                 if (result.result == true) {
                     alert('Insert success! : ' + result.result);
                     clearInsertDataProb();

                 }
                 else {
                     alert('Insert unsuccess! : ' + result.error);
                 }
             },
             error: function (err) {
                 alert('@ViewBag.ErrorMsg');
             }
         });






     });

     $("#ddlProbMaster").on("change", function () {
         var selectValue = $(this).val();
         document.getElementById('KeyWordList').value = selectValue;
         console.log("BBB -> selectValue : " + selectValue)

     });


     function clearInsertDataProb() {

         document.getElementById('username').value = "";
         document.getElementById('email').value = "";
         document.getElementById('probCodeStr').value = "";
         document.getElementById('probNameStr').value = "";
         document.getElementById('probTypeStr').value = "";
         document.getElementById('probTermStr').value = "";
         document.getElementById('memoStr').value = "";


     }



</script>