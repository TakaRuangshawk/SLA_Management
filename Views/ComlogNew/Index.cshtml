@using SLA_Management.Models.COMLogModel;
@model PagedList.IPagedList<SLA_Management.Models.COMLogModel.InsertListFileComLog>
@{
    ViewData["Title"] = "Comlog Management";
}
@*@model IEnumerable<InsertListFileComLog>*@
@*@model IList<SLA_Management.Models.COMLogModel.InsertListFileComLog>*@



<style>
    .bootstrap-select > .dropdown-toggle {
        border-color: #ced4da;
        background-color: transparent;
        position: relative;
        width: 100%;
        text-align: right;
        white-space: nowrap;
        display: -webkit-inline-box;
        display: -webkit-inline-flex;
        display: -ms-inline-flexbox;
        display: inline-flex;
        -webkit-box-align: center;
        -webkit-align-items: center;
        -ms-flex-align: center;
        align-items: center;
        -webkit-box-pack: justify;
        -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
        justify-content: space-between;
    }

    select.form-control {
        -webkit-appearance: button;
    }

    input.form-control {
        -webkit-appearance: button;
        border-radius: 10px;
    }

    
    #header_search {
        top: 20px;
        position: relative;
        background-color: orange;
        border: solid;
        padding: 8px 40px 8px 40px;
        border-radius: 12px;
        font-weight: 700;
    }

    .item {
        padding: 0px;
    }

    #submit {
        position: relative;
        top: 50px;
        background: lightgray;
        border: 10px double white;
        border-radius: 20px;
        padding: 0px 10px 0px 10px;
    }

    #before-submit {
        display: flex;
        justify-content: center;
    }

    #main_search {
        margin-bottom: 50px;
        padding: 30px 0;
        margin-left: 50px;
        margin-right: 50px;
        border: 3px solid #888888;
        background-color: white;
        border-radius: 50px;
    }

    .dropdown-toggle {
        border-radius: 10px;
    }
    th{
        text-align:center;
    }
</style>






<div class="content contentHeader">
    <div class="container w-auto containerHeader">
        <div class="row">
            <div class="col col-md-1">
            </div>
            <div class="col col-md-4">
                <a class="text-white fs-4" id="header_search">Comlog Management</a>
            </div>
        </div>

        <div id="main_search">
            @using (Html.BeginForm("Index", "ComlogNew", FormMethod.Get, new { id = "InsertFileCOMLogRecheckID" }))
            {
                <div class="row" style="margin-top: 45px;align-items:center; display: flex;justify-content: space-around;padding:0vw 3vw 0vw 3vw;white-space:nowrap;">

                    <div class="col-md-1">
                        <label>Terminal ID : </label>
                    </div>
                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        <select class="selectpicker form-control subsearch" id="term_id" name="term_id" data-live-search="true">
                            <option data-tokens="" value="">--</option>
                            @foreach (var item in ViewBag.CurrentTermID)
                            {
                                if (@item.TERM_ID != @ViewBag.TERM_ID)
                                {
                                    <option value=@item.TERM_ID data-tokens=@item.TERM_ID>@item.TERM_SEQ : @item.TERM_ID : @item.TERM_NAME</option>
                                }
                                else
                                {
                                    <option value=@item.TERM_ID data-tokens=@item.TERM_ID selected>@item.TERM_SEQ : @item.TERM_ID : @item.TERM_NAME</option>

                                }
                            }
                        </select>
                    </div>


                    <div class="col-md-1">
                        <label>From Date : </label>

                    </div>
                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        @Html.TextBox("forDateTime", ViewBag.CurrentFr as string, new { @class = "form-control subsearch",@type = "Date", @placeholder = "yyyy-mm-dd" })
                    </div>

                    <div class="col-md-1">
                        <label>To Date : </label>
                    </div>
                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        @Html.TextBox("toDateTime", ViewBag.CurrentTo as string, new { @class = "form-control subsearch", @type = "Date", @placeholder = "yyyy-mm-dd" })
                    </div>
                </div>

                <div class="row" style="margin-top: 45px;align-items:center; display: flex;justify-content: space-around;padding:0vw 3vw 0vw 3vw;white-space:nowrap;">
                    <div class="col-md-1">
                        <label>Rows : </label>
                    </div>
                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        <div class="form-group">
                            @Html.DropDownList("maxRows", new SelectListItem[] {
                        new SelectListItem(){ Text="20", Value = "20"  },
                        new SelectListItem(){ Text="50", Value = "50"  },
                        new SelectListItem(){ Text="100", Value = "100" },
                        new SelectListItem(){ Text="200", Value = "200"  },
                        new SelectListItem(){ Text="1000", Value = "1000"  }
                        }, new {@class = "form-control selectpicker subsearch" , @name = "state"})
                        </div>
                    </div>
                    <div class="col-md-1"></div>
                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;">
                        <div id="processStatus" style="display:none;">
                            <div  class="spinner-border spinner-border-sm" role="status">
                            </div>
                            <span class="sr-only">Loading...</span>

                        </div>
                       
                    </div>
                    <div class="col-md-1"></div>
                    <div class="item col-md-2" style="border-color:#ced4da; background-color: transparent;"></div>
                </div>




                <div class="row">

                    <div class="col" id="before-submit">
                        <div id="submit">
                            
                            <button type="submit" data-toggle="modal" data-target="#WaitingModal" id="btnsearch" class="btn" style="padding:0px;">
                                <img src="~/images/icon_search.png" style="width: 50px; height: 50px" class="rounded-lg  p-0" alt="Search" />
                            </button>




                            <button type="submit" id="btnclear" data-toggle="modal"  data-target="#WaitingModal" onclick="clearFunction()" class="btn" data-toggle="tooltip" name="cmdButton" title="ล้างข้อมูล" value="Clear" style="padding:0px;border: 0px; background-color: transparent;">
                                <img src="~/images/icon_delete.png" style="width: 50px; height: 50px" class="rounded-lg p-0" alt="Clear Data" />
                            </button>


                            <a id="btnSEExp"  title="Excel Export Report" style="cursor: pointer; padding:0px;">
                                <img src="~/images/icon_excel.png" style="width: 50px; height: 50px" class="rounded-lg  p-0" alt="Excel Export Report" />
                            </a>


                            <button type="button" id="btnComlogButton" class="btn" name="UploadComlogButton" title="Upload Comlog" data-toggle="modal" data-target="#UploadModal" style="padding:0px;border: 0px; background-color: transparent;">
                                <img src="~/images/button_uploan.png" style="width: 144px; height: 40px" class="rounded-lg p-0" alt="Upload Comlog" />
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>

    </div>

    <div class="container-fluid">

        <div class="row" style="background-color: #f8d5ad;width: 20vw;padding: 8px;margin-left: 3px;border-radius: 15px;font-size: 2.2vh;font-weight: bold;margin-bottom: 15px; border:1px solid lightgrey;">

            <div class="col" style="display: flex;justify-content: center;">
                <a style="white-space:nowrap;align-items: center;display: flex;">Total Record:</a>
            </div>
            <div class="col" style="display: flex;justify-content: center;">
                <a style="white-space:nowrap;display: flex;align-items: center;background-color: rgba(255,255,255,1);padding: 10px 35px 10px 35px;border-radius: 10px;" ;="">@Model.Count()</a>
            </div>
        </div>
        <div class="table-responsive" style="overflow-x: hidden;">
            <table id="table-id" class="table table-striped custom-table">
                <thead>
                    <tr>
                        <th scope="col">Terminal ID</th>
                        <th scope="col">Serial No.</th>
                        <th scope="col">Terminal Name</th>
                        <th scope="col">Com Log</th>
                        <th scope="col">File Server</th>
                        <th scope="col">Status File</th>
                        <th scope="col">Rows Record</th>
                    </tr>
                </thead>

                <tbody>
                    @if (Model.Count() != 0)
                    {
                        foreach (InsertListFileComLog item in Model)
                        {
                            <tr>
                                <th>@item.Term_ID </th>
                                <th>@item.SerialNo</th>
                                <th>@item.TerminalName</th>
                                <th>@item.ComLog </th>
                                <th>@item.FileServer </th>
                                <th>@item.StatusFile</th>
                                <th>@item.TOTAL_RECORD </th>
                            </tr>
                        }
                    }
                    else
                    {
                    <td colspan="8" style="text-align: center;"> NO DATA </td>
                    }
                </tbody>


            </table>
            <div class="row">
                <div class="col-md-2" style="z-index:2;">
                    <p style="font-size:16px;font-weight:bolder;">
                        Select page :
                        @Html.DropDownList("seletePageNow", new SelectListItem[] {

                        }, new
                        {
                        @class = "form-control"
                        })
                    </p>
                </div>
                <div class="col colPagination" style="padding-top:10px;z-index:1;">

                    <nav>
                        <div class="pagination">
                            <li data-page="prev" id="back" style="background-color:transparent;">

                                <img style="height:40px;width:auto;margin-right:10px;" src="~/images/arrow.png" />
                            </li>
                            <!--	Here the JS Function Will Add the Rows -->
                            <li data-page="next" id="prev" style="background-color:transparent;">
                                <img style="height:40px;width:auto;margin-left:10px;transform:scaleX(-1)" src="~/images/arrow.png" />
                            </li>

                        </div>
                    </nav>
                </div>
            </div>

        </div>
    </div>



</div>










<div class="modal fade" id="UploadModal" tabindex="-1" role="dialog" aria-labelledby="UploadModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#FFA500;">
                <h5 class="modal-title" id="exampleModalLabel" style="color:white;">Upload Files</h5>

            </div>

            @*<form>
            <div class="form-group">
            <label for="recipient-name" class="col-form-label">Recipient:</label>
            <input type="text" class="form-control" id="recipient-name">
            </div>
            <div class="form-group">
            <label for="message-text" class="col-form-label">Message:</label>
            <textarea class="form-control" id="message-text"></textarea>
            </div>
            </form>*@

            <form action="Comlog/UploadFile" enctype="multipart/form-data" method="post" onsubmit="AJAXSubmit(this);return false;">
                <div class="modal-body">

                    <div class="form-group p-2">

                        <lable class="col-form-label">Term ID : </lable>
                        <select class="selectpicker form-control subsearch" id="UplodeTerminal_ID" name="UplodeTerminal_ID" data-live-search="true">
                            <option data-tokens="" value="">--</option>
                            @foreach (var item in ViewBag.CurrentTermID)
                            {
                                if (@item.TERM_ID != @ViewBag.TERM_ID)
                                {
                                    <option value=@item.TERM_ID data-tokens=@item.TERM_ID>@item.TERM_SEQ : @item.TERM_ID : @item.TERM_NAME</option>
                                }
                                else
                                {
                                    <option value=@item.TERM_ID data-tokens=@item.TERM_ID selected>@item.TERM_SEQ : @item.TERM_ID : @item.TERM_NAME</option>

                                }


                            }
                        </select>
                    </div>
                    <div class="form-group p-2">
                        <input class="form-control" type="file" id="files" name="files" multiple>
                    </div>

                    <div id="fileListContainer" style="overflow-y: auto;max-height:150px; border-style: groove;border-radius: 10px; display:none;">
                        <ul class="list-group" id="fileList"></ul>
                    </div>

                    <div style="margin-top:15px;">
                        <output name="result"></output>
                    </div>

                </div>
                <div class="modal-footer" style="background-color:#FFA500;">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" id="UploadFiles" class="btn btn-primary">Send files</button>
                </div>


            </form>











          






        </div>
    </div>
</div>




<div class="modal fade" id="WaitingModal" tabindex="-1" role="dialog" aria-labelledby="WaitingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-dark" style="width: 3rem; height: 3rem;" role="status">
                       
                    </div>
                  

                </div>
                <div class="d-flex justify-content-center">
                    <h1>Loading...</h1>
                </div>


              
            </div>

        </div>
    </div>
</div>

<script>

    $("#InsertFileCOMLogRecheckID").submit(function () {

        var FrDateTemp = new Date($('#forDateTime').val());
        var ToDateTemp = new Date($('#toDateTime').val());

        if (FrDateTemp > ToDateTemp) {
            alert("'From date'( " + FrDateTemp.toISOString().split('T')[0] + " ) should be less than 'To date' ( " + ToDateTemp.toISOString().split('T')[0] + " ) . Please check again!");
            return false;
        } else {
            return true;
        }
        return false;
    });



    function clearFunction() {
        document.getElementById("term_id").value = "";
        document.getElementById("forDateTime").value = "";
        document.getElementById("toDateTime").value = "";
    }


</script>
<script>
    async function AJAXSubmit(oFormElement) {

        var resultElement = oFormElement.elements.namedItem("result");
        const formData = new FormData(oFormElement);
        try {
            const response = await fetch(oFormElement.action, {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                var res = response.json();

                res.then((data) => {

                    resultElement.value = 'Result succeed : count ' + data.count + ', size ' + data.size;
                    resultElement.style.color = 'LightGreen';
                });

            }

        } catch (error) {
            resultElement.value = 'Result error : ' + error;
            resultElement.style.color = 'red';
        }
    }
</script>
<script>
    @{


        var dataExport = ViewBag.ExportDataFile;
        string toDateTime = dataExport.toDateTime == null ? "" : string.Format("{0}-{1}-{2}", dataExport.toDateTime.Year.ToString("0000"), dataExport.toDateTime.Month.ToString("00"), dataExport.toDateTime.Day.ToString("00"));
        string forDateTime = dataExport.forDateTime == null ? "" : string.Format("{0}-{1}-{2}", dataExport.forDateTime.Year.ToString("0000"), dataExport.forDateTime.Month.ToString("00"), dataExport.forDateTime.Day.ToString("00"));


    }

             const dataExport = {
        term_id: "@dataExport.term_id",
        toDateTime: "@toDateTime",
        forDateTime: "@forDateTime",
        row: @Model.Count()
    };
    var processStatus = document.getElementById("processStatus");
    var waitingModal = document.getElementById("WaitingModal");
    
    $("#WaitingModal").on("shown.bs.modal", function () {
       
        if (processStatus.style.display == "none") {
            processStatus.style.display = "block";
        }
    });
    //$("#WaitingModal").on("hidden.bs.modal", function () {
    //    var processStatus = document.getElementById("processStatus");
    //    if (processStatus.style.display == "block") {
    //        processStatus.style.display = "none";
    //    }
    //});


    $("#btnSEExp").on("click", ExportRecordtoExcel);
    
    async function ExportRecordtoExcel() {
        try {

            const response = await fetch('@Url.Action("ExportRecordtoExcel","ComlogNew")', {
                method: 'POST',

                //responseType: "blob"
            });
            if (response.ok) {

                let res = response.blob();

                res.then(blob => {
                    
                    
                    const date = new Date();

                    let currentDay = String(date.getDate()).padStart(2, '0');

                    let currentMonth = String(date.getMonth() + 1).padStart(2, "0");

                    let currentYear = date.getFullYear();
                    let currentDate = `${currentYear}-${currentMonth}-${currentDay}`;


                    let sert = "";
                    if (dataExport.term_id != "" && dataExport.term_id != null) 
                    {
                        sert += "_" + dataExport.term_id;
                    }else
                    {
                        if (dataExport.row !=0) 
                        {
                            sert += "_ALL"
                        }
                       
                    }

                    if (dataExport.toDateTime != "" && dataExport.toDateTime != null) {
                        sert += "_" + dataExport.toDateTime;
                    } 
                    if (dataExport.forDateTime != "" && dataExport.forDateTime != null) {
                        sert += "_" + dataExport.forDateTime;
                    }


                    var url = window.URL.createObjectURL(blob);


                    anchor = document.createElement("a");
                    anchor.href = url;
                    anchor.download = 'ComlogManagement_' + currentDate + sert;
                    anchor.click();
                    window.URL.revokeObjectURL(url);
                    document.removeChild(anchor);
                    
                    //window.location.assign(url);
                });
            } 
            else {
                // Handle the error if the export was unsuccessful
                throw new Error("Export failed with status " + response.status);
            }
            
        } catch (error) {
            console.log(error);
        }

        
    }


</script>
<script>

    let pageSize = @ViewBag.pageSize;
    @{
        int maxRow = Model == null ? 0 : Model.Count();
    }
        let maxRow = @maxRow;

    getPagination('#table-id', pageSize);


    function getPagination(table, row) {
        var lastPage = 1;

        $('#maxRows')
            .on('change', function (evt) {
                $('.paginationprev').html('');

                lastPage = 1;
                $('.pagination')
                    .find('li')
                    .slice(1, -1)
                    .remove();
                var trnum = 0;
                var maxRows = parseInt($(this).val());

                if (maxRows == 5000) {
                    $('.pagination').hide();
                } else {
                    $('.pagination').show();
                }

                var totalRows = $(table + ' tbody tr').length; // numbers of rows
                $(table + ' tr:gt(0)').each(function () {
                    // each TR in  table and not the header
                    trnum++; // Start Counter
                    if (trnum > maxRows) {
                        // if tr number gt maxRows

                        $(this).hide(); // fade it out
                    }
                    if (trnum <= maxRows) {
                        $(this).show();
                    } // else fade in Important in case if it ..
                }); //  was fade out to fade it in
                if (totalRows > maxRows) {
                    // if tr total rows gt max rows option
                    var pagenum = Math.ceil(totalRows / maxRows); // ceil total(rows/maxrows) to get ..
                    //	numbers of pages

                    for (var i = 1; i <= pagenum;) {
                        // for each page append pagination li
                        $('.pagination #prev')
                            .before(
                                '<li data-page="' +
                                i +
                                '">\
                                                                   <a style="color: #333333;">' +
                                i++ +
                                '\
                                                                            </li>'
                            )
                            .show();
                    } // end for i
                    $('#back').show();



                } else {
                    $('#back').hide();
                    $('#prev').hide();
                }

                // end if row count > max rows
                $('.pagination [data-page="1"]').addClass('active'); // add active class to the first li
                $('.pagination li').on('click', function (evt) {
                    // on click each page
                    evt.stopImmediatePropagation();
                    evt.preventDefault();
                    var pageNum = $(this).attr('data-page'); // get it's number

                    var maxRows = parseInt($('#maxRows').val()); // get Max Rows from select option



                    if (pageNum == 'prev') {
                        if (lastPage == 1) {
                            return;
                        }
                        pageNum = --lastPage;
                    }
                    if (maxRows < totalRows) {
                        if (pageNum == 'next') {
                            if (lastPage == $('.pagination li').length - 2) {
                                return;
                            }
                            pageNum = ++lastPage;
                        }
                    }


                    lastPage = pageNum;
                    var trIndex = 0; // reset tr counter
                    $('.pagination li').removeClass('active'); // remove active class from all li
                    $('.pagination [data-page="' + lastPage + '"]').addClass('active'); // add active class to the clicked
                    // $(this).addClass('active');					// add active class to the clicked
                    limitPagging();
                    $(table + ' tr:gt(0)').each(function () {
                        // each tr in table not the header
                        trIndex++; // tr index counter
                        // if tr index gt maxRows*pageNum or lt maxRows*pageNum-maxRows fade if out
                        if (
                            trIndex > maxRows * pageNum ||
                            trIndex <= maxRows * pageNum - maxRows
                        ) {
                            $(this).hide();
                        } else {
                            $(this).show();
                        } //else fade in
                    }); // end of for each tr in table


                    $('#seletePageNow').val(lastPage);




                }); // end of on click pagination list


    @*Set value in seletePage box*@
                    $('#seletePageNow')
                        .find('option')
                        .remove()
                        .end();


                var pagenum = Math.ceil(maxRow / parseInt($('#maxRows').val()));


                var select = document.getElementById("seletePageNow");
                for (var i = parseInt(pagenum); i > 0; i--) {
                    var option = document.createElement('option');
                    option.text = option.value = i;
                    select.add(option, 0);
                }

                $('#seletePageNow').val(lastPage);

            })
            .val(row)
            .change();



        $('#seletePageNow')
            .on('change', function (evt) {
                // on click each page
                evt.stopImmediatePropagation();
                evt.preventDefault();
                var maxRows = parseInt($('#maxRows').val()); // get Max Rows from select option

                var pageNum = $(this).val();

                if (pageNum == null) pageNum = 1;





                lastPage = pageNum;
                var trIndex = 0; // reset tr counter
                $('.pagination li').removeClass('active'); // remove active class from all li
                $('.pagination [data-page="' + lastPage + '"]').addClass('active'); // add active class to the clicked
                // $(this).addClass('active');					// add active class to the clicked
                limitPagging();
                $(table + ' tr:gt(0)').each(function () {
                    // each tr in table not the header
                    trIndex++; // tr index counter
                    // if tr index gt maxRows*pageNum or lt maxRows*pageNum-maxRows fade if out
                    if (
                        trIndex > maxRows * pageNum ||
                        trIndex <= maxRows * pageNum - maxRows
                    ) {
                        $(this).hide();
                    } else {
                        $(this).show();
                    } //else fade in
                }); // end of for each tr in table
            }).change();



        // end of on select change

        // END OF PAGINATION
    }


    function limitPagging() {
        // alert($('.pagination li').length)

        if ($('.pagination li').length > 7) {
            if ($('.pagination li.active').attr('data-page') <= 3) {
                $('.pagination li:gt(5)').hide();
                $('.pagination li:lt(5)').show();
                $('.pagination [data-page="next"]').show();
            } if ($('.pagination li.active').attr('data-page') > 3) {
                $('.pagination li:gt(0)').hide();
                $('.pagination [data-page="next"]').show();
                for (let i = (parseInt($('.pagination li.active').attr('data-page')) - 2); i <= (parseInt($('.pagination li.active').attr('data-page')) + 2); i++) {
                    $('.pagination [data-page="' + i + '"]').show();

                }

            }
        }
    }



    $(function () {
        // Just to append id number for each row
        $('table tr:eq(0)').prepend('<th>No.</th>');

        var id = 0;
        var count = maxRow;

        $('table tr:gt(0)').each(function () {
            id++;
            if (count != 0) {
                $(this).prepend('<td>' + id + '</td>');
            }

        });
    });



    //$("#btnSEExp").click(function (e) {
    //    e.preventDefault();

    //    var expParams = "xlsx" + '|' + $("#frDate").val() + '|' + $("#toDate").val()
    //        + '|' + "xlsx";
    //    var rptType = "xlsx";
    //    $.ajax({
    //        type: "POST",
    //        dataType: "json",
    //        data: '{ "exparams" : "' + expParams + '" }',
    //        contentType: 'application/json; charset=utf-8',
    //        url: '@Url.Action("EJAddTermProb_ExportExc", "EJAddTranProbTerm")',
    //        success: function (result) {
    //            if (result.success == 'S') {
    //                var url = '@Url.Action("DownloadExportFile", "EJAddTranProbTerm")'
    //                window.location = '@Url.Action("DownloadExportFile", "EJAddTranProbTerm")/?rpttype=' + rptType;
    //            }
    //            else { alert(result.errstr); }
    //        },
    //        error: function (err) {
    //            alert('@ViewBag.ErrorMsg');
    //        }
    //    });
    //});



</script>


<script>
    // Handle file input change event
    document.getElementById('files').addEventListener('change', function () {
        const fileList = document.getElementById('fileList');
        const fileListShow = document.getElementById('fileListContainer');
        fileList.innerHTML = ''; // Clear previous list items

        const files = this.files;
        if (files.length != 0) {
            fileListShow.style.display = "block";

        } else {
            fileListShow.style.display = "none";
        }



        for (let i = 0; i < files.length; i++) {

            const listItem = document.createElement('li');
            listItem.className = 'list-group-item';
            listItem.textContent = (i + 1) + '. ' + files[i].name;
            fileList.appendChild(listItem);
        }
    });



</script>
